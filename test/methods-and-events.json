{
  "reportedOn": "Sep 16, 2020, 4:26:22 AM",
  "host": {
    "apiVersion": 12,
    "product": "Bitwig Studio",
    "vendor": "Bitwig",
    "version": "3.2.7",
    "platformType": "MAC"
  },
  "extension": {
    "name": "WebSocket RPC API 12",
    "author": "Masafumi",
    "version": "0.2.0-SNAPSHOT",
    "id": "11797f46-6987-4795-ba94-0a6a0c4e8ac5",
    "requiredApiVersion": 11,
    "hardwareVendor": "WebSocket RPC",
    "hardwareModel": "WebSocket RPC",
    "usingBetaAPI": false,
    "shouldFailOnDeprecatedUse": false
  },
  "methods": [{
    "method": "rpc.reportEvents",
    "params": [],
    "result": "any",
    "expression": "Object Rpc#reportEvents()"
  }, {
    "method": "rpc.echo",
    "params": ["string"],
    "result": "string",
    "expression": "String Rpc#echo(java.lang.String)"
  }, {
    "method": "rpc.on",
    "params": ["string[]"],
    "result": "object",
    "expression": "Map Rpc#on(java.lang.String[])"
  }, {
    "method": "rpc.off",
    "params": ["string[]"],
    "result": "object",
    "expression": "Map Rpc#off(java.lang.String[])"
  }, {
    "method": "rpc.log",
    "params": [],
    "result": "object",
    "expression": "StringValue Rpc#log()"
  }, {
    "method": "rpc.log.get",
    "params": [],
    "result": "string",
    "expression": "String Rpc#log().get()"
  }, {
    "method": "rpc.log.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Rpc#log().getLimited(int)"
  }, {
    "method": "rpc.log.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Rpc#log().isSubscribed()"
  }, {
    "method": "rpc.log.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Rpc#log().unsubscribe()"
  }, {
    "method": "rpc.log.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Rpc#log().subscribe()"
  }, {
    "method": "rpc.report",
    "params": [],
    "result": "any",
    "expression": "Object Rpc#report()"
  }, {
    "method": "rpc.broadcast",
    "params": ["string", "any[]"],
    "result": "void",
    "expression": "void Rpc#broadcast(java.lang.String, java.lang.Object[])"
  }, {
    "method": "rpc.config",
    "params": [],
    "result": "object",
    "expression": "Config Rpc#config()"
  }, {
    "method": "rpc.config",
    "params": ["object"],
    "result": "void",
    "expression": "void Rpc#config(com.github.jhorology.bitwig.Config)"
  }, {
    "method": "test.hello",
    "params": [],
    "result": "string",
    "expression": "String Test#hello()"
  }, {
    "method": "test.nop",
    "params": [],
    "result": "void",
    "expression": "void Test#nop()"
  }, {
    "method": "test.echo",
    "params": ["string"],
    "result": "string",
    "expression": "String Test#echo(java.lang.String)"
  }, {
    "method": "test.concat",
    "params": ["object"],
    "result": "string",
    "expression": "String Test#concat(com.github.jhorology.bitwig.rpc.test.GenericPair<java.lang.String, java.lang.String>)"
  }, {
    "method": "test.concat",
    "params": ["string", "string"],
    "result": "string",
    "expression": "String Test#concat(java.lang.String, java.lang.String)"
  }, {
    "method": "test.concat",
    "params": ["string[]"],
    "result": "string",
    "expression": "String Test#concat(java.lang.String[])"
  }, {
    "method": "test.repeat",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Test#repeat(java.lang.String, int)"
  }, {
    "method": "test.repeat",
    "params": ["object"],
    "result": "string",
    "expression": "String Test#repeat(com.github.jhorology.bitwig.rpc.test.GenericPair<java.lang.String, java.lang.Integer>)"
  }, {
    "method": "test.sum",
    "params": ["number", "number", "number"],
    "result": "number",
    "expression": "int Test#sum(int, int, int)"
  }, {
    "method": "test.sum",
    "params": ["number[]"],
    "result": "number",
    "expression": "int Test#sum(int[])"
  }, {
    "method": "test.sum",
    "params": ["number", "number"],
    "result": "number",
    "expression": "int Test#sum(int, int)"
  }, {
    "method": "test.sum",
    "params": ["object"],
    "result": "number",
    "expression": "int Test#sum(com.github.jhorology.bitwig.rpc.test.IntPair)"
  }, {
    "method": "test.consume",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void Test#consume(java.lang.Number, java.lang.Number, java.lang.Number)"
  }, {
    "method": "test.consume",
    "params": ["number"],
    "result": "void",
    "expression": "void Test#consume(int)"
  }, {
    "method": "test.consume",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Test#consume(double, double)"
  }, {
    "method": "test.consume",
    "params": ["number[]"],
    "result": "void",
    "expression": "void Test#consume(java.lang.Number[])"
  }, {
    "method": "host.showPopupNotification",
    "params": ["string"],
    "result": "void",
    "expression": "void ControllerHost#showPopupNotification(java.lang.String)"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue ControllerHost#getNotificationSettings().getUserNotificationsEnabled()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().toggle()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().set(boolean)"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean ControllerHost#getNotificationSettings().getUserNotificationsEnabled().get()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean ControllerHost#getNotificationSettings().getUserNotificationsEnabled().getAsBoolean()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean ControllerHost#getNotificationSettings().getUserNotificationsEnabled().isSubscribed()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().unsubscribe()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().subscribe()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().invoke()"
  }, {
    "method": "host.getNotificationSettings.setShouldShowChannelSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowChannelSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowDeviceLayerSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowDeviceLayerSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowDeviceSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowDeviceSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowMappingNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowMappingNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowPresetNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowPresetNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowTrackSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowTrackSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowValueNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowValueNotifications(boolean)"
  }, {
    "method": "application.paste",
    "params": [],
    "result": "void",
    "expression": "void Application#paste()"
  }, {
    "method": "application.enter",
    "params": [],
    "result": "void",
    "expression": "void Application#enter()"
  }, {
    "method": "application.redo",
    "params": [],
    "result": "void",
    "expression": "void Application#redo()"
  }, {
    "method": "application.nextSubPanel",
    "params": [],
    "result": "void",
    "expression": "void Application#nextSubPanel()"
  }, {
    "method": "application.toggleInspector",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleInspector()"
  }, {
    "method": "application.toggleNoteEditor",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleNoteEditor()"
  }, {
    "method": "application.toggleAutomationEditor",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleAutomationEditor()"
  }, {
    "method": "application.toggleDevices",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleDevices()"
  }, {
    "method": "application.toggleMixer",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleMixer()"
  }, {
    "method": "application.toggleBrowserVisibility",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleBrowserVisibility()"
  }, {
    "method": "application.nextPanelLayout",
    "params": [],
    "result": "void",
    "expression": "void Application#nextPanelLayout()"
  }, {
    "method": "application.nextProject",
    "params": [],
    "result": "void",
    "expression": "void Application#nextProject()"
  }, {
    "method": "application.recordQuantizationGrid",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Application#recordQuantizationGrid()"
  }, {
    "method": "application.recordQuantizationGrid.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().set(java.lang.String)"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition Application#recordQuantizationGrid().enumDefinition()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int Application#recordQuantizationGrid().enumDefinition().getValueCount()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition Application#recordQuantizationGrid().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int Application#recordQuantizationGrid().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition Application#recordQuantizationGrid().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int Application#recordQuantizationGrid().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "application.recordQuantizationGrid.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "application.recordQuantizationGrid.get",
    "params": [],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().get()"
  }, {
    "method": "application.recordQuantizationGrid.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizationGrid().isSubscribed()"
  }, {
    "method": "application.recordQuantizationGrid.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().unsubscribe()"
  }, {
    "method": "application.recordQuantizationGrid.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().subscribe()"
  }, {
    "method": "application.selectFirst",
    "params": [],
    "result": "void",
    "expression": "void Application#selectFirst()"
  }, {
    "method": "application.selectLast",
    "params": [],
    "result": "void",
    "expression": "void Application#selectLast()"
  }, {
    "method": "application.selectNext",
    "params": [],
    "result": "void",
    "expression": "void Application#selectNext()"
  }, {
    "method": "application.selectPrevious",
    "params": [],
    "result": "void",
    "expression": "void Application#selectPrevious()"
  }, {
    "method": "application.toggleFullScreen",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleFullScreen()"
  }, {
    "method": "application.remove",
    "params": [],
    "result": "void",
    "expression": "void Application#remove()"
  }, {
    "method": "application.getActions",
    "params": [],
    "result": "object[]",
    "expression": "Action[] Application#getActions()"
  }, {
    "method": "application.copy",
    "params": [],
    "result": "void",
    "expression": "void Application#copy()"
  }, {
    "method": "application.duplicate",
    "params": [],
    "result": "void",
    "expression": "void Application#duplicate()"
  }, {
    "method": "application.rename",
    "params": [],
    "result": "void",
    "expression": "void Application#rename()"
  }, {
    "method": "application.cut",
    "params": [],
    "result": "void",
    "expression": "void Application#cut()"
  }, {
    "method": "application.undo",
    "params": [],
    "result": "void",
    "expression": "void Application#undo()"
  }, {
    "method": "application.activateEngine",
    "params": [],
    "result": "void",
    "expression": "void Application#activateEngine()"
  }, {
    "method": "application.arrowKeyDown",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyDown()"
  }, {
    "method": "application.arrowKeyLeft",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyLeft()"
  }, {
    "method": "application.arrowKeyRight",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyRight()"
  }, {
    "method": "application.arrowKeyUp",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyUp()"
  }, {
    "method": "application.selectNone",
    "params": [],
    "result": "void",
    "expression": "void Application#selectNone()"
  }, {
    "method": "application.setPanelLayout",
    "params": ["string"],
    "result": "void",
    "expression": "void Application#setPanelLayout(java.lang.String)"
  }, {
    "method": "application.zoomIn",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomIn()"
  }, {
    "method": "application.zoomOut",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomOut()"
  }, {
    "method": "application.zoomToFit",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToFit()"
  }, {
    "method": "application.zoomToSelection",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToSelection()"
  }, {
    "method": "application.zoomToSelectionOrAll",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToSelectionOrAll()"
  }, {
    "method": "application.zoomToSelectionOrPrevious",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToSelectionOrPrevious()"
  }, {
    "method": "application.createAudioTrack",
    "params": ["number"],
    "result": "void",
    "expression": "void Application#createAudioTrack(int)"
  }, {
    "method": "application.createEffectTrack",
    "params": ["number"],
    "result": "void",
    "expression": "void Application#createEffectTrack(int)"
  }, {
    "method": "application.createInstrumentTrack",
    "params": ["number"],
    "result": "void",
    "expression": "void Application#createInstrumentTrack(int)"
  }, {
    "method": "application.deactivateEngine",
    "params": [],
    "result": "void",
    "expression": "void Application#deactivateEngine()"
  }, {
    "method": "application.displayProfile",
    "params": [],
    "result": "object",
    "expression": "StringValue Application#displayProfile()"
  }, {
    "method": "application.displayProfile.get",
    "params": [],
    "result": "string",
    "expression": "String Application#displayProfile().get()"
  }, {
    "method": "application.displayProfile.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#displayProfile().getLimited(int)"
  }, {
    "method": "application.displayProfile.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#displayProfile().isSubscribed()"
  }, {
    "method": "application.displayProfile.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#displayProfile().unsubscribe()"
  }, {
    "method": "application.displayProfile.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#displayProfile().subscribe()"
  }, {
    "method": "application.focusPanelAbove",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelAbove()"
  }, {
    "method": "application.focusPanelBelow",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelBelow()"
  }, {
    "method": "application.focusPanelToLeft",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelToLeft()"
  }, {
    "method": "application.focusPanelToRight",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelToRight()"
  }, {
    "method": "application.getActionCategories",
    "params": [],
    "result": "object[]",
    "expression": "ActionCategory[] Application#getActionCategories()"
  }, {
    "method": "application.getActionCategory",
    "params": ["string"],
    "result": "object",
    "expression": "ActionCategory Application#getActionCategory(java.lang.String)"
  }, {
    "method": "application.getActionCategory.getName",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getActionCategory(java.lang.String).getName()"
  }, {
    "method": "application.getActionCategory.getActions",
    "params": ["string"],
    "result": "object[]",
    "expression": "Action[] Application#getActionCategory(java.lang.String).getActions()"
  }, {
    "method": "application.getActionCategory.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getActionCategory(java.lang.String).getId()"
  }, {
    "method": "application.hasActiveEngine",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Application#hasActiveEngine()"
  }, {
    "method": "application.hasActiveEngine.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#hasActiveEngine().get()"
  }, {
    "method": "application.hasActiveEngine.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#hasActiveEngine().getAsBoolean()"
  }, {
    "method": "application.hasActiveEngine.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#hasActiveEngine().isSubscribed()"
  }, {
    "method": "application.hasActiveEngine.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#hasActiveEngine().unsubscribe()"
  }, {
    "method": "application.hasActiveEngine.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#hasActiveEngine().subscribe()"
  }, {
    "method": "application.navigateToParentTrackGroup",
    "params": [],
    "result": "void",
    "expression": "void Application#navigateToParentTrackGroup()"
  }, {
    "method": "application.panelLayout",
    "params": [],
    "result": "object",
    "expression": "StringValue Application#panelLayout()"
  }, {
    "method": "application.panelLayout.get",
    "params": [],
    "result": "string",
    "expression": "String Application#panelLayout().get()"
  }, {
    "method": "application.panelLayout.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#panelLayout().getLimited(int)"
  }, {
    "method": "application.panelLayout.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#panelLayout().isSubscribed()"
  }, {
    "method": "application.panelLayout.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#panelLayout().unsubscribe()"
  }, {
    "method": "application.panelLayout.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#panelLayout().subscribe()"
  }, {
    "method": "application.previousPanelLayout",
    "params": [],
    "result": "void",
    "expression": "void Application#previousPanelLayout()"
  }, {
    "method": "application.previousProject",
    "params": [],
    "result": "void",
    "expression": "void Application#previousProject()"
  }, {
    "method": "application.previousSubPanel",
    "params": [],
    "result": "void",
    "expression": "void Application#previousSubPanel()"
  }, {
    "method": "application.projectName",
    "params": [],
    "result": "object",
    "expression": "StringValue Application#projectName()"
  }, {
    "method": "application.projectName.get",
    "params": [],
    "result": "string",
    "expression": "String Application#projectName().get()"
  }, {
    "method": "application.projectName.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#projectName().getLimited(int)"
  }, {
    "method": "application.projectName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#projectName().isSubscribed()"
  }, {
    "method": "application.projectName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#projectName().unsubscribe()"
  }, {
    "method": "application.projectName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#projectName().subscribe()"
  }, {
    "method": "application.recordQuantizeNoteLength",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Application#recordQuantizeNoteLength()"
  }, {
    "method": "application.recordQuantizeNoteLength.toggle",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().toggle()"
  }, {
    "method": "application.recordQuantizeNoteLength.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().set(boolean)"
  }, {
    "method": "application.recordQuantizeNoteLength.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizeNoteLength().get()"
  }, {
    "method": "application.recordQuantizeNoteLength.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizeNoteLength().getAsBoolean()"
  }, {
    "method": "application.recordQuantizeNoteLength.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizeNoteLength().isSubscribed()"
  }, {
    "method": "application.recordQuantizeNoteLength.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().unsubscribe()"
  }, {
    "method": "application.recordQuantizeNoteLength.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().subscribe()"
  }, {
    "method": "application.recordQuantizeNoteLength.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().invoke()"
  }, {
    "method": "application.selectAll",
    "params": [],
    "result": "void",
    "expression": "void Application#selectAll()"
  }, {
    "method": "application.escape",
    "params": [],
    "result": "void",
    "expression": "void Application#escape()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#clipLauncherPostRecordingAction()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().set(java.lang.String)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition Transport#clipLauncherPostRecordingAction().enumDefinition()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int Transport#clipLauncherPostRecordingAction().enumDefinition().getValueCount()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().get()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#clipLauncherPostRecordingAction().isSubscribed()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().unsubscribe()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().subscribe()"
  }, {
    "method": "transport.continuePlayback",
    "params": [],
    "result": "void",
    "expression": "void Transport#continuePlayback()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getClipLauncherPostRecordingTimeOffset()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getClipLauncherPostRecordingTimeOffset().getFormatted()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getClipLauncherPostRecordingTimeOffset().get()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getClipLauncherPostRecordingTimeOffset().getAsDouble()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getClipLauncherPostRecordingTimeOffset().isSubscribed()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().unsubscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().subscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().set(double)"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().inc(double)"
  }, {
    "method": "transport.isArrangerOverdubEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerOverdubEnabled()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().toggle()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerOverdubEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerOverdubEnabled().get()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerOverdubEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerOverdubEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().invoke()"
  }, {
    "method": "transport.isAutomationOverrideActive",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#isAutomationOverrideActive()"
  }, {
    "method": "transport.isAutomationOverrideActive.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isAutomationOverrideActive().get()"
  }, {
    "method": "transport.isAutomationOverrideActive.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isAutomationOverrideActive().getAsBoolean()"
  }, {
    "method": "transport.isAutomationOverrideActive.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isAutomationOverrideActive().isSubscribed()"
  }, {
    "method": "transport.isAutomationOverrideActive.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isAutomationOverrideActive().unsubscribe()"
  }, {
    "method": "transport.isAutomationOverrideActive.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isAutomationOverrideActive().subscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isMetronomeAudibleDuringPreRoll()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().toggle()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().set(boolean)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeAudibleDuringPreRoll().get()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeAudibleDuringPreRoll().getAsBoolean()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeAudibleDuringPreRoll().isSubscribed()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().unsubscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().subscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().invoke()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isMetronomeTickPlaybackEnabled()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().toggle()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().set(boolean)"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeTickPlaybackEnabled().get()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeTickPlaybackEnabled().getAsBoolean()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeTickPlaybackEnabled().isSubscribed()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().unsubscribe()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().subscribe()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().invoke()"
  }, {
    "method": "transport.jumpToNextCueMarker",
    "params": [],
    "result": "void",
    "expression": "void Transport#jumpToNextCueMarker()"
  }, {
    "method": "transport.jumpToPlayStartPosition",
    "params": [],
    "result": "void",
    "expression": "void Transport#jumpToPlayStartPosition()"
  }, {
    "method": "transport.jumpToPreviousCueMarker",
    "params": [],
    "result": "void",
    "expression": "void Transport#jumpToPreviousCueMarker()"
  }, {
    "method": "transport.launchFromPlayStartPosition",
    "params": [],
    "result": "void",
    "expression": "void Transport#launchFromPlayStartPosition()"
  }, {
    "method": "transport.metronomeVolume",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue Transport#metronomeVolume()"
  }, {
    "method": "transport.metronomeVolume.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().setImmediately(double)"
  }, {
    "method": "transport.metronomeVolume.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().incRaw(double)"
  }, {
    "method": "transport.metronomeVolume.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().set(double)"
  }, {
    "method": "transport.metronomeVolume.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.metronomeVolume.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().inc(double)"
  }, {
    "method": "transport.metronomeVolume.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.metronomeVolume.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().setRaw(double)"
  }, {
    "method": "transport.metronomeVolume.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#metronomeVolume().getRaw()"
  }, {
    "method": "transport.metronomeVolume.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#metronomeVolume().displayedValue()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#metronomeVolume().displayedValue().get()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#metronomeVolume().displayedValue().getLimited(int)"
  }, {
    "method": "transport.metronomeVolume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#metronomeVolume().displayedValue().isSubscribed()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().displayedValue().unsubscribe()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().displayedValue().subscribe()"
  }, {
    "method": "transport.metronomeVolume.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#metronomeVolume().get()"
  }, {
    "method": "transport.metronomeVolume.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#metronomeVolume().getAsDouble()"
  }, {
    "method": "transport.metronomeVolume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#metronomeVolume().isSubscribed()"
  }, {
    "method": "transport.metronomeVolume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().unsubscribe()"
  }, {
    "method": "transport.metronomeVolume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().subscribe()"
  }, {
    "method": "transport.playPosition",
    "params": [],
    "result": "object",
    "expression": "BeatTimeValue Transport#playPosition()"
  }, {
    "method": "transport.playPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#playPosition().getFormatted()"
  }, {
    "method": "transport.playPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#playPosition().get()"
  }, {
    "method": "transport.playPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#playPosition().getAsDouble()"
  }, {
    "method": "transport.playPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#playPosition().isSubscribed()"
  }, {
    "method": "transport.playPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playPosition().unsubscribe()"
  }, {
    "method": "transport.playPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playPosition().subscribe()"
  }, {
    "method": "transport.playPositionInSeconds",
    "params": [],
    "result": "object",
    "expression": "DoubleValue Transport#playPositionInSeconds()"
  }, {
    "method": "transport.playPositionInSeconds.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#playPositionInSeconds().get()"
  }, {
    "method": "transport.playPositionInSeconds.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#playPositionInSeconds().getAsDouble()"
  }, {
    "method": "transport.playPositionInSeconds.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#playPositionInSeconds().isSubscribed()"
  }, {
    "method": "transport.playPositionInSeconds.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playPositionInSeconds().unsubscribe()"
  }, {
    "method": "transport.playPositionInSeconds.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playPositionInSeconds().subscribe()"
  }, {
    "method": "transport.playStartPositionInSeconds",
    "params": [],
    "result": "object",
    "expression": "SettableDoubleValue Transport#playStartPositionInSeconds()"
  }, {
    "method": "transport.playStartPositionInSeconds.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#playStartPositionInSeconds().set(double)"
  }, {
    "method": "transport.playStartPositionInSeconds.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#playStartPositionInSeconds().inc(double)"
  }, {
    "method": "transport.playStartPositionInSeconds.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#playStartPositionInSeconds().get()"
  }, {
    "method": "transport.playStartPositionInSeconds.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#playStartPositionInSeconds().getAsDouble()"
  }, {
    "method": "transport.playStartPositionInSeconds.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#playStartPositionInSeconds().isSubscribed()"
  }, {
    "method": "transport.playStartPositionInSeconds.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playStartPositionInSeconds().unsubscribe()"
  }, {
    "method": "transport.playStartPositionInSeconds.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playStartPositionInSeconds().subscribe()"
  }, {
    "method": "transport.preRoll",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#preRoll()"
  }, {
    "method": "transport.preRoll.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#preRoll().set(java.lang.String)"
  }, {
    "method": "transport.preRoll.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition Transport#preRoll().enumDefinition()"
  }, {
    "method": "transport.preRoll.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int Transport#preRoll().enumDefinition().getValueCount()"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#preRoll().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String Transport#preRoll().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int Transport#preRoll().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#preRoll().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#preRoll().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#preRoll().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Transport#preRoll().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int Transport#preRoll().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#preRoll().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "transport.preRoll.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#preRoll().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "transport.preRoll.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#preRoll().get()"
  }, {
    "method": "transport.preRoll.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#preRoll().isSubscribed()"
  }, {
    "method": "transport.preRoll.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#preRoll().unsubscribe()"
  }, {
    "method": "transport.preRoll.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#preRoll().subscribe()"
  }, {
    "method": "transport.resetAutomationOverrides",
    "params": [],
    "result": "void",
    "expression": "void Transport#resetAutomationOverrides()"
  }, {
    "method": "transport.timeSignature.denominator",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue Transport#timeSignature().denominator()"
  }, {
    "method": "transport.timeSignature.denominator.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().set(int)"
  }, {
    "method": "transport.timeSignature.denominator.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().inc(int)"
  }, {
    "method": "transport.timeSignature.denominator.get",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().denominator().get()"
  }, {
    "method": "transport.timeSignature.denominator.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().denominator().getAsInt()"
  }, {
    "method": "transport.timeSignature.denominator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().denominator().isSubscribed()"
  }, {
    "method": "transport.timeSignature.denominator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().unsubscribe()"
  }, {
    "method": "transport.timeSignature.denominator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().subscribe()"
  }, {
    "method": "transport.timeSignature.numerator",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue Transport#timeSignature().numerator()"
  }, {
    "method": "transport.timeSignature.numerator.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().set(int)"
  }, {
    "method": "transport.timeSignature.numerator.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().inc(int)"
  }, {
    "method": "transport.timeSignature.numerator.get",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().numerator().get()"
  }, {
    "method": "transport.timeSignature.numerator.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().numerator().getAsInt()"
  }, {
    "method": "transport.timeSignature.numerator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().numerator().isSubscribed()"
  }, {
    "method": "transport.timeSignature.numerator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().unsubscribe()"
  }, {
    "method": "transport.timeSignature.numerator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().subscribe()"
  }, {
    "method": "transport.timeSignature.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#timeSignature().get()"
  }, {
    "method": "transport.timeSignature.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#timeSignature().set(java.lang.String)"
  }, {
    "method": "transport.timeSignature.ticks",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue Transport#timeSignature().ticks()"
  }, {
    "method": "transport.timeSignature.ticks.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().set(int)"
  }, {
    "method": "transport.timeSignature.ticks.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().inc(int)"
  }, {
    "method": "transport.timeSignature.ticks.get",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().ticks().get()"
  }, {
    "method": "transport.timeSignature.ticks.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().ticks().getAsInt()"
  }, {
    "method": "transport.timeSignature.ticks.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().ticks().isSubscribed()"
  }, {
    "method": "transport.timeSignature.ticks.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().unsubscribe()"
  }, {
    "method": "transport.timeSignature.ticks.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().subscribe()"
  }, {
    "method": "transport.timeSignature.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().isSubscribed()"
  }, {
    "method": "transport.timeSignature.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().unsubscribe()"
  }, {
    "method": "transport.timeSignature.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().subscribe()"
  }, {
    "method": "transport.toggleLatchAutomationWriteMode",
    "params": [],
    "result": "void",
    "expression": "void Transport#toggleLatchAutomationWriteMode()"
  }, {
    "method": "transport.toggleWriteArrangerAutomation",
    "params": [],
    "result": "void",
    "expression": "void Transport#toggleWriteArrangerAutomation()"
  }, {
    "method": "transport.toggleWriteClipLauncherAutomation",
    "params": [],
    "result": "void",
    "expression": "void Transport#toggleWriteClipLauncherAutomation()"
  }, {
    "method": "transport.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void Transport#returnToArrangement()"
  }, {
    "method": "transport.tempo",
    "params": [],
    "result": "object",
    "expression": "Parameter Transport#tempo()"
  }, {
    "method": "transport.tempo.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().setIndication(boolean)"
  }, {
    "method": "transport.tempo.name",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().name()"
  }, {
    "method": "transport.tempo.name.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().name().get()"
  }, {
    "method": "transport.tempo.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().name().getLimited(int)"
  }, {
    "method": "transport.tempo.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().name().isSubscribed()"
  }, {
    "method": "transport.tempo.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().name().unsubscribe()"
  }, {
    "method": "transport.tempo.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().name().subscribe()"
  }, {
    "method": "transport.tempo.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue Transport#tempo().value()"
  }, {
    "method": "transport.tempo.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().setImmediately(double)"
  }, {
    "method": "transport.tempo.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().incRaw(double)"
  }, {
    "method": "transport.tempo.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().set(double)"
  }, {
    "method": "transport.tempo.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().inc(double)"
  }, {
    "method": "transport.tempo.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().setRaw(double)"
  }, {
    "method": "transport.tempo.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().value().getRaw()"
  }, {
    "method": "transport.tempo.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().value().displayedValue()"
  }, {
    "method": "transport.tempo.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().value().displayedValue().get()"
  }, {
    "method": "transport.tempo.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().value().displayedValue().getLimited(int)"
  }, {
    "method": "transport.tempo.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().value().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.value.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().value().get()"
  }, {
    "method": "transport.tempo.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().value().getAsDouble()"
  }, {
    "method": "transport.tempo.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().value().isSubscribed()"
  }, {
    "method": "transport.tempo.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().unsubscribe()"
  }, {
    "method": "transport.tempo.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().subscribe()"
  }, {
    "method": "transport.tempo.reset",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().reset()"
  }, {
    "method": "transport.tempo.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().touch(boolean)"
  }, {
    "method": "transport.tempo.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue Transport#tempo().modulatedValue()"
  }, {
    "method": "transport.tempo.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().modulatedValue().getRaw()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().modulatedValue().displayedValue()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().modulatedValue().displayedValue().get()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().modulatedValue().get()"
  }, {
    "method": "transport.tempo.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().modulatedValue().getAsDouble()"
  }, {
    "method": "transport.tempo.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().modulatedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().subscribe()"
  }, {
    "method": "transport.tempo.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().restoreAutomationControl()"
  }, {
    "method": "transport.tempo.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#tempo().exists()"
  }, {
    "method": "transport.tempo.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().exists().get()"
  }, {
    "method": "transport.tempo.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().exists().getAsBoolean()"
  }, {
    "method": "transport.tempo.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().exists().isSubscribed()"
  }, {
    "method": "transport.tempo.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().exists().unsubscribe()"
  }, {
    "method": "transport.tempo.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().exists().subscribe()"
  }, {
    "method": "transport.tempo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().isSubscribed()"
  }, {
    "method": "transport.tempo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().unsubscribe()"
  }, {
    "method": "transport.tempo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().subscribe()"
  }, {
    "method": "transport.tempo.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().setImmediately(double)"
  }, {
    "method": "transport.tempo.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().incRaw(double)"
  }, {
    "method": "transport.tempo.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().set(double)"
  }, {
    "method": "transport.tempo.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().inc(double)"
  }, {
    "method": "transport.tempo.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().setRaw(double)"
  }, {
    "method": "transport.tempo.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().getRaw()"
  }, {
    "method": "transport.tempo.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().displayedValue()"
  }, {
    "method": "transport.tempo.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().displayedValue().get()"
  }, {
    "method": "transport.tempo.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().displayedValue().getLimited(int)"
  }, {
    "method": "transport.tempo.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().get()"
  }, {
    "method": "transport.tempo.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().getAsDouble()"
  }, {
    "method": "transport.isPlaying",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isPlaying()"
  }, {
    "method": "transport.isPlaying.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().toggle()"
  }, {
    "method": "transport.isPlaying.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPlaying().set(boolean)"
  }, {
    "method": "transport.isPlaying.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPlaying().get()"
  }, {
    "method": "transport.isPlaying.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPlaying().getAsBoolean()"
  }, {
    "method": "transport.isPlaying.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPlaying().isSubscribed()"
  }, {
    "method": "transport.isPlaying.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().unsubscribe()"
  }, {
    "method": "transport.isPlaying.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().subscribe()"
  }, {
    "method": "transport.isPlaying.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().invoke()"
  }, {
    "method": "transport.isMetronomeEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isMetronomeEnabled()"
  }, {
    "method": "transport.isMetronomeEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().toggle()"
  }, {
    "method": "transport.isMetronomeEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().set(boolean)"
  }, {
    "method": "transport.isMetronomeEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeEnabled().get()"
  }, {
    "method": "transport.isMetronomeEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeEnabled().getAsBoolean()"
  }, {
    "method": "transport.isMetronomeEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeEnabled().isSubscribed()"
  }, {
    "method": "transport.isMetronomeEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().unsubscribe()"
  }, {
    "method": "transport.isMetronomeEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().subscribe()"
  }, {
    "method": "transport.isMetronomeEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().invoke()"
  }, {
    "method": "transport.isArrangerRecordEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerRecordEnabled()"
  }, {
    "method": "transport.isArrangerRecordEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().toggle()"
  }, {
    "method": "transport.isArrangerRecordEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerRecordEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerRecordEnabled().get()"
  }, {
    "method": "transport.isArrangerRecordEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerRecordEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerRecordEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerRecordEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerRecordEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerRecordEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerRecordEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().invoke()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerAutomationWriteEnabled()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().toggle()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerAutomationWriteEnabled().get()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerAutomationWriteEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerAutomationWriteEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().invoke()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isClipLauncherAutomationWriteEnabled()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().toggle()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().set(boolean)"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherAutomationWriteEnabled().get()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherAutomationWriteEnabled().getAsBoolean()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherAutomationWriteEnabled().isSubscribed()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().unsubscribe()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().subscribe()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().invoke()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isClipLauncherOverdubEnabled()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().toggle()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().set(boolean)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherOverdubEnabled().get()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherOverdubEnabled().getAsBoolean()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherOverdubEnabled().isSubscribed()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().unsubscribe()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().subscribe()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().invoke()"
  }, {
    "method": "transport.defaultLaunchQuantization",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#defaultLaunchQuantization()"
  }, {
    "method": "transport.defaultLaunchQuantization.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().set(java.lang.String)"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition Transport#defaultLaunchQuantization().enumDefinition()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int Transport#defaultLaunchQuantization().enumDefinition().getValueCount()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "transport.defaultLaunchQuantization.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "transport.defaultLaunchQuantization.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().get()"
  }, {
    "method": "transport.defaultLaunchQuantization.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#defaultLaunchQuantization().isSubscribed()"
  }, {
    "method": "transport.defaultLaunchQuantization.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().unsubscribe()"
  }, {
    "method": "transport.defaultLaunchQuantization.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().subscribe()"
  }, {
    "method": "transport.incPosition",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void Transport#incPosition(double, boolean)"
  }, {
    "method": "transport.getInPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getInPosition()"
  }, {
    "method": "transport.getInPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getInPosition().getFormatted()"
  }, {
    "method": "transport.getInPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getInPosition().get()"
  }, {
    "method": "transport.getInPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getInPosition().getAsDouble()"
  }, {
    "method": "transport.getInPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getInPosition().isSubscribed()"
  }, {
    "method": "transport.getInPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getInPosition().unsubscribe()"
  }, {
    "method": "transport.getInPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getInPosition().subscribe()"
  }, {
    "method": "transport.getInPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getInPosition().set(double)"
  }, {
    "method": "transport.getInPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getInPosition().inc(double)"
  }, {
    "method": "transport.getOutPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getOutPosition()"
  }, {
    "method": "transport.getOutPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getOutPosition().getFormatted()"
  }, {
    "method": "transport.getOutPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getOutPosition().get()"
  }, {
    "method": "transport.getOutPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getOutPosition().getAsDouble()"
  }, {
    "method": "transport.getOutPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getOutPosition().isSubscribed()"
  }, {
    "method": "transport.getOutPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getOutPosition().unsubscribe()"
  }, {
    "method": "transport.getOutPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getOutPosition().subscribe()"
  }, {
    "method": "transport.getOutPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getOutPosition().set(double)"
  }, {
    "method": "transport.getOutPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getOutPosition().inc(double)"
  }, {
    "method": "transport.increaseTempo",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#increaseTempo(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.isPunchInEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isPunchInEnabled()"
  }, {
    "method": "transport.isPunchInEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().toggle()"
  }, {
    "method": "transport.isPunchInEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().set(boolean)"
  }, {
    "method": "transport.isPunchInEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchInEnabled().get()"
  }, {
    "method": "transport.isPunchInEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchInEnabled().getAsBoolean()"
  }, {
    "method": "transport.isPunchInEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchInEnabled().isSubscribed()"
  }, {
    "method": "transport.isPunchInEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().unsubscribe()"
  }, {
    "method": "transport.isPunchInEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().subscribe()"
  }, {
    "method": "transport.isPunchInEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().invoke()"
  }, {
    "method": "transport.isPunchOutEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isPunchOutEnabled()"
  }, {
    "method": "transport.isPunchOutEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().toggle()"
  }, {
    "method": "transport.isPunchOutEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().set(boolean)"
  }, {
    "method": "transport.isPunchOutEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchOutEnabled().get()"
  }, {
    "method": "transport.isPunchOutEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchOutEnabled().getAsBoolean()"
  }, {
    "method": "transport.isPunchOutEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchOutEnabled().isSubscribed()"
  }, {
    "method": "transport.isPunchOutEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().unsubscribe()"
  }, {
    "method": "transport.isPunchOutEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().subscribe()"
  }, {
    "method": "transport.isPunchOutEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().invoke()"
  }, {
    "method": "transport.togglePlay",
    "params": [],
    "result": "void",
    "expression": "void Transport#togglePlay()"
  }, {
    "method": "transport.tapTempo",
    "params": [],
    "result": "void",
    "expression": "void Transport#tapTempo()"
  }, {
    "method": "transport.automationWriteMode",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#automationWriteMode()"
  }, {
    "method": "transport.automationWriteMode.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#automationWriteMode().set(java.lang.String)"
  }, {
    "method": "transport.automationWriteMode.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition Transport#automationWriteMode().enumDefinition()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int Transport#automationWriteMode().enumDefinition().getValueCount()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#automationWriteMode().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String Transport#automationWriteMode().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int Transport#automationWriteMode().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#automationWriteMode().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#automationWriteMode().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition Transport#automationWriteMode().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Transport#automationWriteMode().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int Transport#automationWriteMode().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#automationWriteMode().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "transport.automationWriteMode.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String Transport#automationWriteMode().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "transport.automationWriteMode.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#automationWriteMode().get()"
  }, {
    "method": "transport.automationWriteMode.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#automationWriteMode().isSubscribed()"
  }, {
    "method": "transport.automationWriteMode.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#automationWriteMode().unsubscribe()"
  }, {
    "method": "transport.automationWriteMode.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#automationWriteMode().subscribe()"
  }, {
    "method": "transport.playStartPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#playStartPosition()"
  }, {
    "method": "transport.playStartPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#playStartPosition().getFormatted()"
  }, {
    "method": "transport.playStartPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#playStartPosition().get()"
  }, {
    "method": "transport.playStartPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#playStartPosition().getAsDouble()"
  }, {
    "method": "transport.playStartPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#playStartPosition().isSubscribed()"
  }, {
    "method": "transport.playStartPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playStartPosition().unsubscribe()"
  }, {
    "method": "transport.playStartPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#playStartPosition().subscribe()"
  }, {
    "method": "transport.playStartPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#playStartPosition().set(double)"
  }, {
    "method": "transport.playStartPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#playStartPosition().inc(double)"
  }, {
    "method": "transport.setPosition",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#setPosition(double)"
  }, {
    "method": "transport.fastForward",
    "params": [],
    "result": "void",
    "expression": "void Transport#fastForward()"
  }, {
    "method": "transport.isArrangerLoopEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerLoopEnabled()"
  }, {
    "method": "transport.isArrangerLoopEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().toggle()"
  }, {
    "method": "transport.isArrangerLoopEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerLoopEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerLoopEnabled().get()"
  }, {
    "method": "transport.isArrangerLoopEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerLoopEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerLoopEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerLoopEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerLoopEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerLoopEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerLoopEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().invoke()"
  }, {
    "method": "transport.stop",
    "params": [],
    "result": "void",
    "expression": "void Transport#stop()"
  }, {
    "method": "transport.rewind",
    "params": [],
    "result": "void",
    "expression": "void Transport#rewind()"
  }, {
    "method": "transport.restart",
    "params": [],
    "result": "void",
    "expression": "void Transport#restart()"
  }, {
    "method": "transport.crossfade",
    "params": [],
    "result": "object",
    "expression": "Parameter Transport#crossfade()"
  }, {
    "method": "transport.crossfade.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().setIndication(boolean)"
  }, {
    "method": "transport.crossfade.name",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().name()"
  }, {
    "method": "transport.crossfade.name.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().name().get()"
  }, {
    "method": "transport.crossfade.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().name().getLimited(int)"
  }, {
    "method": "transport.crossfade.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().name().isSubscribed()"
  }, {
    "method": "transport.crossfade.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().name().unsubscribe()"
  }, {
    "method": "transport.crossfade.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().name().subscribe()"
  }, {
    "method": "transport.crossfade.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue Transport#crossfade().value()"
  }, {
    "method": "transport.crossfade.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().setImmediately(double)"
  }, {
    "method": "transport.crossfade.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().incRaw(double)"
  }, {
    "method": "transport.crossfade.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().set(double)"
  }, {
    "method": "transport.crossfade.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().inc(double)"
  }, {
    "method": "transport.crossfade.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().setRaw(double)"
  }, {
    "method": "transport.crossfade.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().value().getRaw()"
  }, {
    "method": "transport.crossfade.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().value().displayedValue()"
  }, {
    "method": "transport.crossfade.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().value().displayedValue().get()"
  }, {
    "method": "transport.crossfade.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().value().displayedValue().getLimited(int)"
  }, {
    "method": "transport.crossfade.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().value().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.value.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().value().get()"
  }, {
    "method": "transport.crossfade.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().value().getAsDouble()"
  }, {
    "method": "transport.crossfade.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().value().isSubscribed()"
  }, {
    "method": "transport.crossfade.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().unsubscribe()"
  }, {
    "method": "transport.crossfade.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().subscribe()"
  }, {
    "method": "transport.crossfade.reset",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().reset()"
  }, {
    "method": "transport.crossfade.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().touch(boolean)"
  }, {
    "method": "transport.crossfade.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue Transport#crossfade().modulatedValue()"
  }, {
    "method": "transport.crossfade.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().modulatedValue().getRaw()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().modulatedValue().displayedValue()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().modulatedValue().displayedValue().get()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().modulatedValue().get()"
  }, {
    "method": "transport.crossfade.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().modulatedValue().getAsDouble()"
  }, {
    "method": "transport.crossfade.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().modulatedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().subscribe()"
  }, {
    "method": "transport.crossfade.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().restoreAutomationControl()"
  }, {
    "method": "transport.crossfade.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#crossfade().exists()"
  }, {
    "method": "transport.crossfade.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().exists().get()"
  }, {
    "method": "transport.crossfade.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().exists().getAsBoolean()"
  }, {
    "method": "transport.crossfade.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().exists().isSubscribed()"
  }, {
    "method": "transport.crossfade.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().exists().unsubscribe()"
  }, {
    "method": "transport.crossfade.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().exists().subscribe()"
  }, {
    "method": "transport.crossfade.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().isSubscribed()"
  }, {
    "method": "transport.crossfade.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().unsubscribe()"
  }, {
    "method": "transport.crossfade.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().subscribe()"
  }, {
    "method": "transport.crossfade.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().setImmediately(double)"
  }, {
    "method": "transport.crossfade.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().incRaw(double)"
  }, {
    "method": "transport.crossfade.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().set(double)"
  }, {
    "method": "transport.crossfade.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().inc(double)"
  }, {
    "method": "transport.crossfade.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().setRaw(double)"
  }, {
    "method": "transport.crossfade.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().getRaw()"
  }, {
    "method": "transport.crossfade.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().displayedValue()"
  }, {
    "method": "transport.crossfade.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().displayedValue().get()"
  }, {
    "method": "transport.crossfade.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().displayedValue().getLimited(int)"
  }, {
    "method": "transport.crossfade.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().get()"
  }, {
    "method": "transport.crossfade.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().getAsDouble()"
  }, {
    "method": "transport.play",
    "params": [],
    "result": "void",
    "expression": "void Transport#play()"
  }, {
    "method": "transport.record",
    "params": [],
    "result": "void",
    "expression": "void Transport#record()"
  }, {
    "method": "transport.getPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getPosition()"
  }, {
    "method": "transport.getPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getPosition().getFormatted()"
  }, {
    "method": "transport.getPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getPosition().get()"
  }, {
    "method": "transport.getPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getPosition().getAsDouble()"
  }, {
    "method": "transport.getPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getPosition().isSubscribed()"
  }, {
    "method": "transport.getPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getPosition().unsubscribe()"
  }, {
    "method": "transport.getPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getPosition().subscribe()"
  }, {
    "method": "transport.getPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getPosition().set(double)"
  }, {
    "method": "transport.getPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getPosition().inc(double)"
  }, {
    "method": "transport.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#exists()"
  }, {
    "method": "transport.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#exists().get()"
  }, {
    "method": "transport.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#exists().getAsBoolean()"
  }, {
    "method": "transport.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#exists().isSubscribed()"
  }, {
    "method": "transport.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#exists().unsubscribe()"
  }, {
    "method": "transport.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#exists().subscribe()"
  }, {
    "method": "transport.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isSubscribed()"
  }, {
    "method": "transport.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#unsubscribe()"
  }, {
    "method": "transport.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#subscribe()"
  }, {
    "method": "mixer.isIoSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Mixer#isIoSectionVisible()"
  }, {
    "method": "mixer.isIoSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isIoSectionVisible().toggle()"
  }, {
    "method": "mixer.isIoSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Mixer#isIoSectionVisible().set(boolean)"
  }, {
    "method": "mixer.isIoSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isIoSectionVisible().get()"
  }, {
    "method": "mixer.isIoSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isIoSectionVisible().getAsBoolean()"
  }, {
    "method": "mixer.isIoSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isIoSectionVisible().isSubscribed()"
  }, {
    "method": "mixer.isIoSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isIoSectionVisible().unsubscribe()"
  }, {
    "method": "mixer.isIoSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isIoSectionVisible().subscribe()"
  }, {
    "method": "mixer.isIoSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isIoSectionVisible().invoke()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Mixer#isCrossFadeSectionVisible()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isCrossFadeSectionVisible().toggle()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Mixer#isCrossFadeSectionVisible().set(boolean)"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isCrossFadeSectionVisible().get()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isCrossFadeSectionVisible().getAsBoolean()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isCrossFadeSectionVisible().isSubscribed()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isCrossFadeSectionVisible().unsubscribe()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isCrossFadeSectionVisible().subscribe()"
  }, {
    "method": "mixer.isCrossFadeSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isCrossFadeSectionVisible().invoke()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Mixer#isClipLauncherSectionVisible()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isClipLauncherSectionVisible().toggle()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Mixer#isClipLauncherSectionVisible().set(boolean)"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isClipLauncherSectionVisible().get()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isClipLauncherSectionVisible().getAsBoolean()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isClipLauncherSectionVisible().isSubscribed()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isClipLauncherSectionVisible().unsubscribe()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isClipLauncherSectionVisible().subscribe()"
  }, {
    "method": "mixer.isClipLauncherSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isClipLauncherSectionVisible().invoke()"
  }, {
    "method": "mixer.isDeviceSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Mixer#isDeviceSectionVisible()"
  }, {
    "method": "mixer.isDeviceSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isDeviceSectionVisible().toggle()"
  }, {
    "method": "mixer.isDeviceSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Mixer#isDeviceSectionVisible().set(boolean)"
  }, {
    "method": "mixer.isDeviceSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isDeviceSectionVisible().get()"
  }, {
    "method": "mixer.isDeviceSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isDeviceSectionVisible().getAsBoolean()"
  }, {
    "method": "mixer.isDeviceSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isDeviceSectionVisible().isSubscribed()"
  }, {
    "method": "mixer.isDeviceSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isDeviceSectionVisible().unsubscribe()"
  }, {
    "method": "mixer.isDeviceSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isDeviceSectionVisible().subscribe()"
  }, {
    "method": "mixer.isDeviceSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isDeviceSectionVisible().invoke()"
  }, {
    "method": "mixer.isMeterSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Mixer#isMeterSectionVisible()"
  }, {
    "method": "mixer.isMeterSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isMeterSectionVisible().toggle()"
  }, {
    "method": "mixer.isMeterSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Mixer#isMeterSectionVisible().set(boolean)"
  }, {
    "method": "mixer.isMeterSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isMeterSectionVisible().get()"
  }, {
    "method": "mixer.isMeterSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isMeterSectionVisible().getAsBoolean()"
  }, {
    "method": "mixer.isMeterSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isMeterSectionVisible().isSubscribed()"
  }, {
    "method": "mixer.isMeterSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isMeterSectionVisible().unsubscribe()"
  }, {
    "method": "mixer.isMeterSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isMeterSectionVisible().subscribe()"
  }, {
    "method": "mixer.isMeterSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isMeterSectionVisible().invoke()"
  }, {
    "method": "mixer.isSendSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Mixer#isSendSectionVisible()"
  }, {
    "method": "mixer.isSendSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isSendSectionVisible().toggle()"
  }, {
    "method": "mixer.isSendSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Mixer#isSendSectionVisible().set(boolean)"
  }, {
    "method": "mixer.isSendSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isSendSectionVisible().get()"
  }, {
    "method": "mixer.isSendSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isSendSectionVisible().getAsBoolean()"
  }, {
    "method": "mixer.isSendSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Mixer#isSendSectionVisible().isSubscribed()"
  }, {
    "method": "mixer.isSendSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isSendSectionVisible().unsubscribe()"
  }, {
    "method": "mixer.isSendSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isSendSectionVisible().subscribe()"
  }, {
    "method": "mixer.isSendSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void Mixer#isSendSectionVisible().invoke()"
  }, {
    "method": "cursorTrack.selectFirstChild",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectFirstChild()"
  }, {
    "method": "cursorTrack.selectParent",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectParent()"
  }, {
    "method": "cursorTrack.setCursorNavigationMode",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#setCursorNavigationMode(com.bitwig.extension.controller.api.CursorNavigationMode)"
  }, {
    "method": "cursorTrack.isActivated",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#isActivated()"
  }, {
    "method": "cursorTrack.isActivated.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isActivated().toggle()"
  }, {
    "method": "cursorTrack.isActivated.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#isActivated().set(boolean)"
  }, {
    "method": "cursorTrack.isActivated.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isActivated().get()"
  }, {
    "method": "cursorTrack.isActivated.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isActivated().getAsBoolean()"
  }, {
    "method": "cursorTrack.isActivated.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isActivated().isSubscribed()"
  }, {
    "method": "cursorTrack.isActivated.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isActivated().unsubscribe()"
  }, {
    "method": "cursorTrack.isActivated.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isActivated().subscribe()"
  }, {
    "method": "cursorTrack.isActivated.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isActivated().invoke()"
  }, {
    "method": "cursorTrack.makeVisibleInArranger",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#makeVisibleInArranger()"
  }, {
    "method": "cursorTrack.makeVisibleInMixer",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#makeVisibleInMixer()"
  }, {
    "method": "cursorTrack.pan",
    "params": [],
    "result": "object",
    "expression": "Parameter CursorTrack#pan()"
  }, {
    "method": "cursorTrack.pan.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#pan().setIndication(boolean)"
  }, {
    "method": "cursorTrack.pan.name",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#pan().name()"
  }, {
    "method": "cursorTrack.pan.name.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#pan().name().get()"
  }, {
    "method": "cursorTrack.pan.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#pan().name().getLimited(int)"
  }, {
    "method": "cursorTrack.pan.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().name().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().name().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().name().subscribe()"
  }, {
    "method": "cursorTrack.pan.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue CursorTrack#pan().value()"
  }, {
    "method": "cursorTrack.pan.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().setImmediately(double)"
  }, {
    "method": "cursorTrack.pan.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().incRaw(double)"
  }, {
    "method": "cursorTrack.pan.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().set(double)"
  }, {
    "method": "cursorTrack.pan.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.pan.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().inc(double)"
  }, {
    "method": "cursorTrack.pan.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.pan.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().value().setRaw(double)"
  }, {
    "method": "cursorTrack.pan.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().value().getRaw()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#pan().value().displayedValue()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#pan().value().displayedValue().get()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#pan().value().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().value().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.value.get",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().value().get()"
  }, {
    "method": "cursorTrack.pan.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().value().getAsDouble()"
  }, {
    "method": "cursorTrack.pan.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().value().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().value().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().value().subscribe()"
  }, {
    "method": "cursorTrack.pan.reset",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().reset()"
  }, {
    "method": "cursorTrack.pan.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#pan().touch(boolean)"
  }, {
    "method": "cursorTrack.pan.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue CursorTrack#pan().modulatedValue()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().modulatedValue().getRaw()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#pan().modulatedValue().displayedValue()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#pan().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#pan().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().modulatedValue().get()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().modulatedValue().getAsDouble()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().modulatedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().restoreAutomationControl()"
  }, {
    "method": "cursorTrack.pan.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#pan().exists()"
  }, {
    "method": "cursorTrack.pan.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().exists().get()"
  }, {
    "method": "cursorTrack.pan.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.pan.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().exists().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().exists().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().exists().subscribe()"
  }, {
    "method": "cursorTrack.pan.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().subscribe()"
  }, {
    "method": "cursorTrack.pan.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().setImmediately(double)"
  }, {
    "method": "cursorTrack.pan.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().incRaw(double)"
  }, {
    "method": "cursorTrack.pan.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().set(double)"
  }, {
    "method": "cursorTrack.pan.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#pan().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.pan.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().inc(double)"
  }, {
    "method": "cursorTrack.pan.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#pan().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.pan.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#pan().setRaw(double)"
  }, {
    "method": "cursorTrack.pan.getRaw",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().getRaw()"
  }, {
    "method": "cursorTrack.pan.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#pan().displayedValue()"
  }, {
    "method": "cursorTrack.pan.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#pan().displayedValue().get()"
  }, {
    "method": "cursorTrack.pan.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#pan().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.pan.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#pan().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#pan().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.get",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().get()"
  }, {
    "method": "cursorTrack.pan.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#pan().getAsDouble()"
  }, {
    "method": "cursorTrack.mute",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#mute()"
  }, {
    "method": "cursorTrack.mute.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#mute().toggle()"
  }, {
    "method": "cursorTrack.mute.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#mute().set(boolean)"
  }, {
    "method": "cursorTrack.mute.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#mute().get()"
  }, {
    "method": "cursorTrack.mute.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#mute().getAsBoolean()"
  }, {
    "method": "cursorTrack.mute.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#mute().isSubscribed()"
  }, {
    "method": "cursorTrack.mute.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#mute().unsubscribe()"
  }, {
    "method": "cursorTrack.mute.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#mute().subscribe()"
  }, {
    "method": "cursorTrack.mute.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#mute().invoke()"
  }, {
    "method": "cursorTrack.solo",
    "params": [],
    "result": "object",
    "expression": "SoloValue CursorTrack#solo()"
  }, {
    "method": "cursorTrack.solo.toggle",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#solo().toggle(boolean)"
  }, {
    "method": "cursorTrack.solo.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#solo().toggle()"
  }, {
    "method": "cursorTrack.solo.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#solo().set(boolean)"
  }, {
    "method": "cursorTrack.solo.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#solo().get()"
  }, {
    "method": "cursorTrack.solo.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#solo().getAsBoolean()"
  }, {
    "method": "cursorTrack.solo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#solo().isSubscribed()"
  }, {
    "method": "cursorTrack.solo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#solo().unsubscribe()"
  }, {
    "method": "cursorTrack.solo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#solo().subscribe()"
  }, {
    "method": "cursorTrack.solo.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#solo().invoke()"
  }, {
    "method": "cursorTrack.volume",
    "params": [],
    "result": "object",
    "expression": "Parameter CursorTrack#volume()"
  }, {
    "method": "cursorTrack.volume.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#volume().setIndication(boolean)"
  }, {
    "method": "cursorTrack.volume.name",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#volume().name()"
  }, {
    "method": "cursorTrack.volume.name.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#volume().name().get()"
  }, {
    "method": "cursorTrack.volume.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#volume().name().getLimited(int)"
  }, {
    "method": "cursorTrack.volume.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().name().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().name().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().name().subscribe()"
  }, {
    "method": "cursorTrack.volume.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue CursorTrack#volume().value()"
  }, {
    "method": "cursorTrack.volume.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().setImmediately(double)"
  }, {
    "method": "cursorTrack.volume.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().incRaw(double)"
  }, {
    "method": "cursorTrack.volume.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().set(double)"
  }, {
    "method": "cursorTrack.volume.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.volume.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().inc(double)"
  }, {
    "method": "cursorTrack.volume.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.volume.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().value().setRaw(double)"
  }, {
    "method": "cursorTrack.volume.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().value().getRaw()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#volume().value().displayedValue()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#volume().value().displayedValue().get()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#volume().value().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().value().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.value.get",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().value().get()"
  }, {
    "method": "cursorTrack.volume.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().value().getAsDouble()"
  }, {
    "method": "cursorTrack.volume.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().value().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().value().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().value().subscribe()"
  }, {
    "method": "cursorTrack.volume.reset",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().reset()"
  }, {
    "method": "cursorTrack.volume.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#volume().touch(boolean)"
  }, {
    "method": "cursorTrack.volume.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue CursorTrack#volume().modulatedValue()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().modulatedValue().getRaw()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#volume().modulatedValue().displayedValue()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#volume().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#volume().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().modulatedValue().get()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().modulatedValue().getAsDouble()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().modulatedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().restoreAutomationControl()"
  }, {
    "method": "cursorTrack.volume.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#volume().exists()"
  }, {
    "method": "cursorTrack.volume.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().exists().get()"
  }, {
    "method": "cursorTrack.volume.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.volume.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().exists().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().exists().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().exists().subscribe()"
  }, {
    "method": "cursorTrack.volume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().subscribe()"
  }, {
    "method": "cursorTrack.volume.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().setImmediately(double)"
  }, {
    "method": "cursorTrack.volume.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().incRaw(double)"
  }, {
    "method": "cursorTrack.volume.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().set(double)"
  }, {
    "method": "cursorTrack.volume.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#volume().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.volume.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().inc(double)"
  }, {
    "method": "cursorTrack.volume.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#volume().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.volume.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#volume().setRaw(double)"
  }, {
    "method": "cursorTrack.volume.getRaw",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().getRaw()"
  }, {
    "method": "cursorTrack.volume.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#volume().displayedValue()"
  }, {
    "method": "cursorTrack.volume.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#volume().displayedValue().get()"
  }, {
    "method": "cursorTrack.volume.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#volume().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.volume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#volume().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#volume().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.get",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().get()"
  }, {
    "method": "cursorTrack.volume.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double CursorTrack#volume().getAsDouble()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt",
    "params": ["number"],
    "result": "object",
    "expression": "Send CursorTrack#sendBank().getItemAt(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isPreFader",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sendBank().getItemAt(int).isPreFader()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isPreFader.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).isPreFader().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isPreFader.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).isPreFader().getAsBoolean()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isPreFader.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).isPreFader().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isPreFader.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).isPreFader().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isPreFader.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).isPreFader().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode",
    "params": ["number"],
    "result": "object",
    "expression": "SettableEnumValue CursorTrack#sendBank().getItemAt(int).sendMode()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.set",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendMode().set(java.lang.String)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition",
    "params": ["number"],
    "result": "object",
    "expression": "EnumDefinition CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.getValueCount",
    "params": ["number"],
    "result": "number",
    "expression": "int CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().getValueCount()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt",
    "params": ["number", "number"],
    "result": "object",
    "expression": "EnumValueDefinition CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number", "number"],
    "result": "number",
    "expression": "int CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getId",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor",
    "params": ["number", "string"],
    "result": "object",
    "expression": "EnumValueDefinition CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["number", "string", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["number", "string"],
    "result": "number",
    "expression": "int CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getId",
    "params": ["number", "string"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["number", "string"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.get",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).sendMode().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).sendMode().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendMode().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendMode.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendMode().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor",
    "params": ["number"],
    "result": "object",
    "expression": "SettableColorValue CursorTrack#sendBank().getItemAt(int).sendChannelColor()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.set",
    "params": ["number", "number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendChannelColor().set(float, float, float)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.set",
    "params": ["number", "number", "number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendChannelColor().set(float, float, float, float)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.red",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#sendBank().getItemAt(int).sendChannelColor().red()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.alpha",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#sendBank().getItemAt(int).sendChannelColor().alpha()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.blue",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#sendBank().getItemAt(int).sendChannelColor().blue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.green",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#sendBank().getItemAt(int).sendChannelColor().green()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).sendChannelColor().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendChannelColor().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).sendChannelColor().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setIndication",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).setIndication(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue CursorTrack#sendBank().getItemAt(int).name()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.get",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).name().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).name().getLimited(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).name().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).name().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).name().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value",
    "params": ["number"],
    "result": "object",
    "expression": "SettableRangedValue CursorTrack#sendBank().getItemAt(int).value()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.setImmediately",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().setImmediately(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.incRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().incRaw(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().set(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.set",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().inc(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.inc",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.setRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().setRaw(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.getRaw",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).value().getRaw()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue CursorTrack#sendBank().getItemAt(int).value().displayedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.get",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).value().displayedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).value().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.get",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).value().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.getAsDouble",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).value().getAsDouble()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).value().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).value().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.reset",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).reset()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.touch",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).touch(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue",
    "params": ["number"],
    "result": "object",
    "expression": "RangedValue CursorTrack#sendBank().getItemAt(int).modulatedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.getRaw",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).modulatedValue().getRaw()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue CursorTrack#sendBank().getItemAt(int).modulatedValue().displayedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.get",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.get",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).modulatedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.getAsDouble",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).modulatedValue().getAsDouble()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).modulatedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).modulatedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).modulatedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.restoreAutomationControl",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).restoreAutomationControl()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.exists",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sendBank().getItemAt(int).exists()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.exists.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).exists().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.exists.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.exists.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).exists().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.exists.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).exists().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.exists.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).exists().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setImmediately",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).setImmediately(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.incRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).incRaw(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).set(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.set",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).inc(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.inc",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).setRaw(double)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.getRaw",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).getRaw()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue CursorTrack#sendBank().getItemAt(int).displayedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.get",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).displayedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#sendBank().getItemAt(int).displayedValue().getLimited(int)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().getItemAt(int).displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().getItemAt(int).displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.get",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.getAsDouble",
    "params": ["number"],
    "result": "number",
    "expression": "double CursorTrack#sendBank().getItemAt(int).getAsDouble()"
  }, {
    "method": "cursorTrack.sendBank.setSkipDisabledItems",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().setSkipDisabledItems(boolean)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue CursorTrack#sendBank().cursorIndex()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().cursorIndex().set(int)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().cursorIndex().inc(int)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().cursorIndex().get()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().cursorIndex().getAsInt()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().cursorIndex().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().cursorIndex().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().cursorIndex().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.scrollPageForwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollPageForwards()"
  }, {
    "method": "cursorTrack.sendBank.scrollPageBackwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollPageBackwards()"
  }, {
    "method": "cursorTrack.sendBank.setSizeOfBank",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().setSizeOfBank(int)"
  }, {
    "method": "cursorTrack.sendBank.itemCount",
    "params": [],
    "result": "object",
    "expression": "IntegerValue CursorTrack#sendBank().itemCount()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().itemCount().get()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().itemCount().getAsInt()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().itemCount().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().itemCount().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().itemCount().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getCapacityOfBank",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().getCapacityOfBank()"
  }, {
    "method": "cursorTrack.sendBank.getSizeOfBank",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().getSizeOfBank()"
  }, {
    "method": "cursorTrack.sendBank.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sendBank().exists()"
  }, {
    "method": "cursorTrack.sendBank.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().exists().get()"
  }, {
    "method": "cursorTrack.sendBank.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.sendBank.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().exists().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().exists().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().exists().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.scrollForwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollForwards()"
  }, {
    "method": "cursorTrack.sendBank.scrollBackwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollBackwards()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue CursorTrack#sendBank().scrollPosition()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollPosition().set(int)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollPosition().inc(int)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().scrollPosition().get()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#sendBank().scrollPosition().getAsInt()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().scrollPosition().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollPosition().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollPosition().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sendBank().canScrollBackwards()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().canScrollBackwards().get()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().canScrollBackwards().getAsBoolean()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().canScrollBackwards().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().canScrollBackwards().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().canScrollBackwards().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sendBank().canScrollForwards()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().canScrollForwards().get()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().canScrollForwards().getAsBoolean()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sendBank().canScrollForwards().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().canScrollForwards().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sendBank().canScrollForwards().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.scrollIntoView",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollIntoView(int)"
  }, {
    "method": "cursorTrack.sendBank.scrollBy",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollBy(int)"
  }, {
    "method": "cursorTrack.sendBank.scrollByPages",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#sendBank().scrollByPages(int)"
  }, {
    "method": "cursorTrack.selectInMixer",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectInMixer()"
  }, {
    "method": "cursorTrack.playingNotes.isNotePlaying",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#playingNotes().isNotePlaying(int)"
  }, {
    "method": "cursorTrack.playingNotes.get",
    "params": [],
    "result": "any[]",
    "expression": "Object[] CursorTrack#playingNotes().get()"
  }, {
    "method": "cursorTrack.playingNotes.get",
    "params": ["number"],
    "result": "any",
    "expression": "Object CursorTrack#playingNotes().get(int)"
  }, {
    "method": "cursorTrack.playingNotes.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#playingNotes().isEmpty()"
  }, {
    "method": "cursorTrack.playingNotes.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#playingNotes().isSubscribed()"
  }, {
    "method": "cursorTrack.playingNotes.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#playingNotes().unsubscribe()"
  }, {
    "method": "cursorTrack.playingNotes.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#playingNotes().subscribe()"
  }, {
    "method": "cursorTrack.isMutedBySolo",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#isMutedBySolo()"
  }, {
    "method": "cursorTrack.isMutedBySolo.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isMutedBySolo().get()"
  }, {
    "method": "cursorTrack.isMutedBySolo.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isMutedBySolo().getAsBoolean()"
  }, {
    "method": "cursorTrack.isMutedBySolo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isMutedBySolo().isSubscribed()"
  }, {
    "method": "cursorTrack.isMutedBySolo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isMutedBySolo().unsubscribe()"
  }, {
    "method": "cursorTrack.isMutedBySolo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isMutedBySolo().subscribe()"
  }, {
    "method": "cursorTrack.color",
    "params": [],
    "result": "object",
    "expression": "SettableColorValue CursorTrack#color()"
  }, {
    "method": "cursorTrack.color.set",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#color().set(float, float, float)"
  }, {
    "method": "cursorTrack.color.set",
    "params": ["number", "number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#color().set(float, float, float, float)"
  }, {
    "method": "cursorTrack.color.red",
    "params": [],
    "result": "number",
    "expression": "float CursorTrack#color().red()"
  }, {
    "method": "cursorTrack.color.alpha",
    "params": [],
    "result": "number",
    "expression": "float CursorTrack#color().alpha()"
  }, {
    "method": "cursorTrack.color.blue",
    "params": [],
    "result": "number",
    "expression": "float CursorTrack#color().blue()"
  }, {
    "method": "cursorTrack.color.green",
    "params": [],
    "result": "number",
    "expression": "float CursorTrack#color().green()"
  }, {
    "method": "cursorTrack.color.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#color().isSubscribed()"
  }, {
    "method": "cursorTrack.color.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#color().unsubscribe()"
  }, {
    "method": "cursorTrack.color.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#color().subscribe()"
  }, {
    "method": "cursorTrack.duplicate",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#duplicate()"
  }, {
    "method": "cursorTrack.deleteObject",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#deleteObject()"
  }, {
    "method": "cursorTrack.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectInEditor()"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void CursorTrack#startOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#startOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#startOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#startOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void CursorTrack#endOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#endOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#endOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#endOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.name",
    "params": [],
    "result": "object",
    "expression": "SettableStringValue CursorTrack#name()"
  }, {
    "method": "cursorTrack.name.set",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#name().set(java.lang.String)"
  }, {
    "method": "cursorTrack.name.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#name().get()"
  }, {
    "method": "cursorTrack.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#name().getLimited(int)"
  }, {
    "method": "cursorTrack.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#name().isSubscribed()"
  }, {
    "method": "cursorTrack.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#name().unsubscribe()"
  }, {
    "method": "cursorTrack.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#name().subscribe()"
  }, {
    "method": "cursorTrack.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#exists()"
  }, {
    "method": "cursorTrack.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#exists().get()"
  }, {
    "method": "cursorTrack.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#exists().isSubscribed()"
  }, {
    "method": "cursorTrack.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#exists().unsubscribe()"
  }, {
    "method": "cursorTrack.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#exists().subscribe()"
  }, {
    "method": "cursorTrack.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isSubscribed()"
  }, {
    "method": "cursorTrack.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#unsubscribe()"
  }, {
    "method": "cursorTrack.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#subscribe()"
  }, {
    "method": "cursorTrack.selectFirst",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectFirst()"
  }, {
    "method": "cursorTrack.selectLast",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectLast()"
  }, {
    "method": "cursorTrack.selectNext",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectNext()"
  }, {
    "method": "cursorTrack.selectPrevious",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#selectPrevious()"
  }, {
    "method": "cursorTrack.hasNext",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#hasNext()"
  }, {
    "method": "cursorTrack.hasNext.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#hasNext().get()"
  }, {
    "method": "cursorTrack.hasNext.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#hasNext().getAsBoolean()"
  }, {
    "method": "cursorTrack.hasNext.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#hasNext().isSubscribed()"
  }, {
    "method": "cursorTrack.hasNext.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#hasNext().unsubscribe()"
  }, {
    "method": "cursorTrack.hasNext.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#hasNext().subscribe()"
  }, {
    "method": "cursorTrack.hasPrevious",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#hasPrevious()"
  }, {
    "method": "cursorTrack.hasPrevious.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#hasPrevious().get()"
  }, {
    "method": "cursorTrack.hasPrevious.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#hasPrevious().getAsBoolean()"
  }, {
    "method": "cursorTrack.hasPrevious.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#hasPrevious().isSubscribed()"
  }, {
    "method": "cursorTrack.hasPrevious.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#hasPrevious().unsubscribe()"
  }, {
    "method": "cursorTrack.hasPrevious.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#hasPrevious().subscribe()"
  }, {
    "method": "cursorTrack.isPinned",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#isPinned()"
  }, {
    "method": "cursorTrack.isPinned.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isPinned().toggle()"
  }, {
    "method": "cursorTrack.isPinned.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#isPinned().set(boolean)"
  }, {
    "method": "cursorTrack.isPinned.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isPinned().get()"
  }, {
    "method": "cursorTrack.isPinned.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isPinned().getAsBoolean()"
  }, {
    "method": "cursorTrack.isPinned.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isPinned().isSubscribed()"
  }, {
    "method": "cursorTrack.isPinned.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isPinned().unsubscribe()"
  }, {
    "method": "cursorTrack.isPinned.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isPinned().subscribe()"
  }, {
    "method": "cursorTrack.isPinned.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isPinned().invoke()"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void CursorTrack#afterTrackInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#afterTrackInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#afterTrackInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#afterTrackInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#afterTrackInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#afterTrackInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.autoMonitor",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#autoMonitor()"
  }, {
    "method": "cursorTrack.autoMonitor.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#autoMonitor().toggle()"
  }, {
    "method": "cursorTrack.autoMonitor.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#autoMonitor().set(boolean)"
  }, {
    "method": "cursorTrack.autoMonitor.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#autoMonitor().get()"
  }, {
    "method": "cursorTrack.autoMonitor.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#autoMonitor().getAsBoolean()"
  }, {
    "method": "cursorTrack.autoMonitor.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#autoMonitor().isSubscribed()"
  }, {
    "method": "cursorTrack.autoMonitor.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#autoMonitor().unsubscribe()"
  }, {
    "method": "cursorTrack.autoMonitor.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#autoMonitor().subscribe()"
  }, {
    "method": "cursorTrack.autoMonitor.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#autoMonitor().invoke()"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void CursorTrack#beforeTrackInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#beforeTrackInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#beforeTrackInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#beforeTrackInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#beforeTrackInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#beforeTrackInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.canHoldAudioData",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#canHoldAudioData()"
  }, {
    "method": "cursorTrack.canHoldAudioData.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldAudioData().toggle()"
  }, {
    "method": "cursorTrack.canHoldAudioData.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#canHoldAudioData().set(boolean)"
  }, {
    "method": "cursorTrack.canHoldAudioData.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#canHoldAudioData().get()"
  }, {
    "method": "cursorTrack.canHoldAudioData.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#canHoldAudioData().getAsBoolean()"
  }, {
    "method": "cursorTrack.canHoldAudioData.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#canHoldAudioData().isSubscribed()"
  }, {
    "method": "cursorTrack.canHoldAudioData.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldAudioData().unsubscribe()"
  }, {
    "method": "cursorTrack.canHoldAudioData.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldAudioData().subscribe()"
  }, {
    "method": "cursorTrack.canHoldAudioData.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldAudioData().invoke()"
  }, {
    "method": "cursorTrack.canHoldNoteData",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#canHoldNoteData()"
  }, {
    "method": "cursorTrack.canHoldNoteData.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldNoteData().toggle()"
  }, {
    "method": "cursorTrack.canHoldNoteData.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#canHoldNoteData().set(boolean)"
  }, {
    "method": "cursorTrack.canHoldNoteData.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#canHoldNoteData().get()"
  }, {
    "method": "cursorTrack.canHoldNoteData.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#canHoldNoteData().getAsBoolean()"
  }, {
    "method": "cursorTrack.canHoldNoteData.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#canHoldNoteData().isSubscribed()"
  }, {
    "method": "cursorTrack.canHoldNoteData.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldNoteData().unsubscribe()"
  }, {
    "method": "cursorTrack.canHoldNoteData.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldNoteData().subscribe()"
  }, {
    "method": "cursorTrack.canHoldNoteData.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#canHoldNoteData().invoke()"
  }, {
    "method": "cursorTrack.createNewLauncherClip",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#createNewLauncherClip(int, int)"
  }, {
    "method": "cursorTrack.createNewLauncherClip",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#createNewLauncherClip(int)"
  }, {
    "method": "cursorTrack.getIsPreFader",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#getIsPreFader()"
  }, {
    "method": "cursorTrack.getIsPreFader.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#getIsPreFader().toggle()"
  }, {
    "method": "cursorTrack.getIsPreFader.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#getIsPreFader().set(boolean)"
  }, {
    "method": "cursorTrack.getIsPreFader.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#getIsPreFader().get()"
  }, {
    "method": "cursorTrack.getIsPreFader.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#getIsPreFader().getAsBoolean()"
  }, {
    "method": "cursorTrack.getIsPreFader.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#getIsPreFader().isSubscribed()"
  }, {
    "method": "cursorTrack.getIsPreFader.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#getIsPreFader().unsubscribe()"
  }, {
    "method": "cursorTrack.getIsPreFader.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#getIsPreFader().subscribe()"
  }, {
    "method": "cursorTrack.getIsPreFader.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#getIsPreFader().invoke()"
  }, {
    "method": "cursorTrack.recordNewLauncherClip",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#recordNewLauncherClip(int)"
  }, {
    "method": "cursorTrack.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#returnToArrangement()"
  }, {
    "method": "cursorTrack.selectSlot",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#selectSlot(int)"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sourceSelector().hasAudioInputSelected()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().hasAudioInputSelected().get()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().hasAudioInputSelected().getAsBoolean()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().hasAudioInputSelected().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().hasAudioInputSelected().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().hasAudioInputSelected().subscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sourceSelector().hasNoteInputSelected()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().hasNoteInputSelected().get()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().hasNoteInputSelected().getAsBoolean()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().hasNoteInputSelected().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().hasNoteInputSelected().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().hasNoteInputSelected().subscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#sourceSelector().exists()"
  }, {
    "method": "cursorTrack.sourceSelector.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().exists().get()"
  }, {
    "method": "cursorTrack.sourceSelector.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.sourceSelector.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().exists().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().exists().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().exists().subscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#sourceSelector().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#sourceSelector().subscribe()"
  }, {
    "method": "cursorTrack.startNote",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#startNote(int, int)"
  }, {
    "method": "cursorTrack.stopNote",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#stopNote(int, int)"
  }, {
    "method": "cursorTrack.trackType",
    "params": [],
    "result": "object",
    "expression": "StringValue CursorTrack#trackType()"
  }, {
    "method": "cursorTrack.trackType.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#trackType().get()"
  }, {
    "method": "cursorTrack.trackType.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#trackType().getLimited(int)"
  }, {
    "method": "cursorTrack.trackType.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#trackType().isSubscribed()"
  }, {
    "method": "cursorTrack.trackType.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#trackType().unsubscribe()"
  }, {
    "method": "cursorTrack.trackType.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#trackType().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.createEmptyClip",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().createEmptyClip(int, int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.duplicateClip",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().duplicateClip(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().toggle()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().set(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().invoke()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.showInEditor",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().showInEditor(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.select",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().select(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().setIndication(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.record",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().record(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().returnToArrangement()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.launch",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().launch(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.stop",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().stop()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.createEmptyClip",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).createEmptyClip(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.duplicateClip",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).duplicateClip()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.showInEditor",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).showInEditor()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.select",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).select()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaybackQueued()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaybackQueued().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaybackQueued().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaybackQueued().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaybackQueued().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaybackQueued().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).hasContent()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).hasContent().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).hasContent().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).hasContent().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).hasContent().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).hasContent().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaying()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaying().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaying().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaying().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaying().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isPlaying().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecording()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecording().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecording().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecording().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecording().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecording().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecordingQueued()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecordingQueued().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecordingQueued().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecordingQueued().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecordingQueued().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isRecordingQueued().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).isStopQueued()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isStopQueued().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isStopQueued().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isStopQueued().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isStopQueued().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isStopQueued().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).isSelected()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isSelected().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isSelected().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isSelected().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isSelected().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).isSelected().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color",
    "params": ["number"],
    "result": "object",
    "expression": "SettableColorValue CursorTrack#clipLauncherSlotBank().getItemAt(int).color()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.set",
    "params": ["number", "number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).color().set(float, float, float)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.set",
    "params": ["number", "number", "number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).color().set(float, float, float, float)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.red",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#clipLauncherSlotBank().getItemAt(int).color().red()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.alpha",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#clipLauncherSlotBank().getItemAt(int).color().alpha()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.blue",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#clipLauncherSlotBank().getItemAt(int).color().blue()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.green",
    "params": ["number"],
    "result": "number",
    "expression": "float CursorTrack#clipLauncherSlotBank().getItemAt(int).color().green()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).color().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).color().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).color().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.record",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).record()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.browseToInsertClip",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).browseToInsertClip()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.launch",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).launch()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex",
    "params": ["number"],
    "result": "object",
    "expression": "IntegerValue CursorTrack#clipLauncherSlotBank().getItemAt(int).sceneIndex()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.get",
    "params": ["number"],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().getItemAt(int).sceneIndex().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.getAsInt",
    "params": ["number"],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().getItemAt(int).sceneIndex().getAsInt()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).sceneIndex().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).sceneIndex().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).sceneIndex().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.setIndication",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).setIndication(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue CursorTrack#clipLauncherSlotBank().getItemAt(int).name()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.get",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#clipLauncherSlotBank().getItemAt(int).name().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#clipLauncherSlotBank().getItemAt(int).name().getLimited(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).name().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).name().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).name().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertBitwigDevice",
    "params": ["number", "object"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).nextSceneInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertFile",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).nextSceneInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertVST2Device",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).nextSceneInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertVST3Device",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).nextSceneInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.paste",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).nextSceneInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.browse",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).nextSceneInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertBitwigDevice",
    "params": ["number", "object"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).previousSceneInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertFile",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).previousSceneInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertVST2Device",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).previousSceneInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertVST3Device",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).previousSceneInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.paste",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).previousSceneInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.browse",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).previousSceneInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertBitwigDevice",
    "params": ["number", "object"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).replaceInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertFile",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).replaceInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertVST2Device",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).replaceInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertVST3Device",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).replaceInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.paste",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).replaceInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.browse",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).replaceInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.deleteObject",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).deleteObject()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.exists",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().getItemAt(int).exists()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.exists.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).exists().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.exists.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.exists.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).exists().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.exists.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).exists().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.exists.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).exists().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().getItemAt(int).isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().getItemAt(int).subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.setSkipDisabledItems",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().setSkipDisabledItems(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue CursorTrack#clipLauncherSlotBank().cursorIndex()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().cursorIndex().set(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().cursorIndex().inc(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().cursorIndex().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().cursorIndex().getAsInt()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().cursorIndex().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().cursorIndex().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().cursorIndex().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPageForwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollPageForwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPageBackwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollPageBackwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.setSizeOfBank",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().setSizeOfBank(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount",
    "params": [],
    "result": "object",
    "expression": "IntegerValue CursorTrack#clipLauncherSlotBank().itemCount()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().itemCount().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().itemCount().getAsInt()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().itemCount().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().itemCount().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().itemCount().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getCapacityOfBank",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().getCapacityOfBank()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getSizeOfBank",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().getSizeOfBank()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().exists()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().exists().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().exists().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().exists().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().exists().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().exists().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollForwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollForwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollBackwards",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollBackwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue CursorTrack#clipLauncherSlotBank().scrollPosition()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollPosition().set(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollPosition().inc(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().scrollPosition().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#clipLauncherSlotBank().scrollPosition().getAsInt()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().scrollPosition().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollPosition().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollPosition().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().canScrollBackwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().canScrollBackwards().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().canScrollBackwards().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().canScrollBackwards().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().canScrollBackwards().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().canScrollBackwards().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#clipLauncherSlotBank().canScrollForwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().canScrollForwards().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().canScrollForwards().getAsBoolean()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#clipLauncherSlotBank().canScrollForwards().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().canScrollForwards().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().canScrollForwards().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollIntoView",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollIntoView(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollBy",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollBy(int)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollByPages",
    "params": ["number"],
    "result": "void",
    "expression": "void CursorTrack#clipLauncherSlotBank().scrollByPages(int)"
  }, {
    "method": "cursorTrack.crossFadeMode",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue CursorTrack#crossFadeMode()"
  }, {
    "method": "cursorTrack.crossFadeMode.set",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#crossFadeMode().set(java.lang.String)"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition CursorTrack#crossFadeMode().enumDefinition()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#crossFadeMode().enumDefinition().getValueCount()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition CursorTrack#crossFadeMode().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int CursorTrack#crossFadeMode().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition CursorTrack#crossFadeMode().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int CursorTrack#crossFadeMode().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "cursorTrack.crossFadeMode.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "cursorTrack.crossFadeMode.get",
    "params": [],
    "result": "string",
    "expression": "String CursorTrack#crossFadeMode().get()"
  }, {
    "method": "cursorTrack.crossFadeMode.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#crossFadeMode().isSubscribed()"
  }, {
    "method": "cursorTrack.crossFadeMode.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#crossFadeMode().unsubscribe()"
  }, {
    "method": "cursorTrack.crossFadeMode.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#crossFadeMode().subscribe()"
  }, {
    "method": "cursorTrack.isGroup",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#isGroup()"
  }, {
    "method": "cursorTrack.isGroup.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isGroup().get()"
  }, {
    "method": "cursorTrack.isGroup.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isGroup().getAsBoolean()"
  }, {
    "method": "cursorTrack.isGroup.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isGroup().isSubscribed()"
  }, {
    "method": "cursorTrack.isGroup.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isGroup().unsubscribe()"
  }, {
    "method": "cursorTrack.isGroup.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isGroup().subscribe()"
  }, {
    "method": "cursorTrack.isQueuedForStop",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#isQueuedForStop()"
  }, {
    "method": "cursorTrack.isQueuedForStop.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isQueuedForStop().get()"
  }, {
    "method": "cursorTrack.isQueuedForStop.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isQueuedForStop().getAsBoolean()"
  }, {
    "method": "cursorTrack.isQueuedForStop.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isQueuedForStop().isSubscribed()"
  }, {
    "method": "cursorTrack.isQueuedForStop.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isQueuedForStop().unsubscribe()"
  }, {
    "method": "cursorTrack.isQueuedForStop.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isQueuedForStop().subscribe()"
  }, {
    "method": "cursorTrack.playNote",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void CursorTrack#playNote(int, int)"
  }, {
    "method": "cursorTrack.sendMidi",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void CursorTrack#sendMidi(int, int, int)"
  }, {
    "method": "cursorTrack.isStopped",
    "params": [],
    "result": "object",
    "expression": "BooleanValue CursorTrack#isStopped()"
  }, {
    "method": "cursorTrack.isStopped.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isStopped().get()"
  }, {
    "method": "cursorTrack.isStopped.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isStopped().getAsBoolean()"
  }, {
    "method": "cursorTrack.isStopped.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#isStopped().isSubscribed()"
  }, {
    "method": "cursorTrack.isStopped.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isStopped().unsubscribe()"
  }, {
    "method": "cursorTrack.isStopped.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#isStopped().subscribe()"
  }, {
    "method": "cursorTrack.position",
    "params": [],
    "result": "object",
    "expression": "IntegerValue CursorTrack#position()"
  }, {
    "method": "cursorTrack.position.get",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#position().get()"
  }, {
    "method": "cursorTrack.position.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int CursorTrack#position().getAsInt()"
  }, {
    "method": "cursorTrack.position.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#position().isSubscribed()"
  }, {
    "method": "cursorTrack.position.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#position().unsubscribe()"
  }, {
    "method": "cursorTrack.position.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#position().subscribe()"
  }, {
    "method": "cursorTrack.stop",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#stop()"
  }, {
    "method": "cursorTrack.setName",
    "params": ["string"],
    "result": "void",
    "expression": "void CursorTrack#setName(java.lang.String)"
  }, {
    "method": "cursorTrack.arm",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#arm()"
  }, {
    "method": "cursorTrack.arm.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#arm().toggle()"
  }, {
    "method": "cursorTrack.arm.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#arm().set(boolean)"
  }, {
    "method": "cursorTrack.arm.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#arm().get()"
  }, {
    "method": "cursorTrack.arm.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#arm().getAsBoolean()"
  }, {
    "method": "cursorTrack.arm.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#arm().isSubscribed()"
  }, {
    "method": "cursorTrack.arm.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#arm().unsubscribe()"
  }, {
    "method": "cursorTrack.arm.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#arm().subscribe()"
  }, {
    "method": "cursorTrack.arm.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#arm().invoke()"
  }, {
    "method": "cursorTrack.monitor",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue CursorTrack#monitor()"
  }, {
    "method": "cursorTrack.monitor.toggle",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#monitor().toggle()"
  }, {
    "method": "cursorTrack.monitor.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void CursorTrack#monitor().set(boolean)"
  }, {
    "method": "cursorTrack.monitor.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#monitor().get()"
  }, {
    "method": "cursorTrack.monitor.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#monitor().getAsBoolean()"
  }, {
    "method": "cursorTrack.monitor.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean CursorTrack#monitor().isSubscribed()"
  }, {
    "method": "cursorTrack.monitor.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#monitor().unsubscribe()"
  }, {
    "method": "cursorTrack.monitor.subscribe",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#monitor().subscribe()"
  }, {
    "method": "cursorTrack.monitor.invoke",
    "params": [],
    "result": "void",
    "expression": "void CursorTrack#monitor().invoke()"
  }, {
    "method": "cursorDevice.selectParent",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectParent()"
  }, {
    "method": "cursorDevice.selectFirstInKeyPad",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectFirstInKeyPad(int)"
  }, {
    "method": "cursorDevice.selectFirstInSlot",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectFirstInSlot(java.lang.String)"
  }, {
    "method": "cursorDevice.selectFirstInLayer",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectFirstInLayer(int)"
  }, {
    "method": "cursorDevice.selectFirstInLayer",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectFirstInLayer(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.isActivated",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#channel().isActivated()"
  }, {
    "method": "cursorDevice.channel.isActivated.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isActivated().toggle()"
  }, {
    "method": "cursorDevice.channel.isActivated.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isActivated().set(boolean)"
  }, {
    "method": "cursorDevice.channel.isActivated.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isActivated().get()"
  }, {
    "method": "cursorDevice.channel.isActivated.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isActivated().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.isActivated.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isActivated().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.isActivated.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isActivated().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.isActivated.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isActivated().subscribe()"
  }, {
    "method": "cursorDevice.channel.isActivated.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isActivated().invoke()"
  }, {
    "method": "cursorDevice.channel.makeVisibleInArranger",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().makeVisibleInArranger()"
  }, {
    "method": "cursorDevice.channel.makeVisibleInMixer",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().makeVisibleInMixer()"
  }, {
    "method": "cursorDevice.channel.pan",
    "params": [],
    "result": "object",
    "expression": "Parameter PinnableCursorDevice#channel().pan()"
  }, {
    "method": "cursorDevice.channel.pan.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().setIndication(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.name",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().pan().name()"
  }, {
    "method": "cursorDevice.channel.pan.name.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().name().get()"
  }, {
    "method": "cursorDevice.channel.pan.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().name().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.pan.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().name().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue PinnableCursorDevice#channel().pan().value()"
  }, {
    "method": "cursorDevice.channel.pan.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().setImmediately(double)"
  }, {
    "method": "cursorDevice.channel.pan.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().incRaw(double)"
  }, {
    "method": "cursorDevice.channel.pan.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().set(double)"
  }, {
    "method": "cursorDevice.channel.pan.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().inc(double)"
  }, {
    "method": "cursorDevice.channel.pan.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().setRaw(double)"
  }, {
    "method": "cursorDevice.channel.pan.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().value().getRaw()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().pan().value().displayedValue()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().value().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().value().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value.get",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().value().get()"
  }, {
    "method": "cursorDevice.channel.pan.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().value().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.pan.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().value().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().value().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.reset",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().reset()"
  }, {
    "method": "cursorDevice.channel.pan.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().touch(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue PinnableCursorDevice#channel().pan().modulatedValue()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().modulatedValue().getRaw()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().pan().modulatedValue().displayedValue()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().modulatedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().modulatedValue().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().modulatedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().restoreAutomationControl()"
  }, {
    "method": "cursorDevice.channel.pan.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().pan().exists()"
  }, {
    "method": "cursorDevice.channel.pan.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().exists().get()"
  }, {
    "method": "cursorDevice.channel.pan.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.pan.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().exists().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().exists().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().exists().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().setImmediately(double)"
  }, {
    "method": "cursorDevice.channel.pan.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().incRaw(double)"
  }, {
    "method": "cursorDevice.channel.pan.set",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().set(double)"
  }, {
    "method": "cursorDevice.channel.pan.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.pan.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().inc(double)"
  }, {
    "method": "cursorDevice.channel.pan.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.pan.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().setRaw(double)"
  }, {
    "method": "cursorDevice.channel.pan.getRaw",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().getRaw()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().pan().displayedValue()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().pan().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().pan().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().pan().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.get",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().get()"
  }, {
    "method": "cursorDevice.channel.pan.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().pan().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.mute",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#channel().mute()"
  }, {
    "method": "cursorDevice.channel.mute.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().mute().toggle()"
  }, {
    "method": "cursorDevice.channel.mute.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().mute().set(boolean)"
  }, {
    "method": "cursorDevice.channel.mute.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().mute().get()"
  }, {
    "method": "cursorDevice.channel.mute.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().mute().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.mute.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().mute().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.mute.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().mute().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.mute.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().mute().subscribe()"
  }, {
    "method": "cursorDevice.channel.mute.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().mute().invoke()"
  }, {
    "method": "cursorDevice.channel.solo",
    "params": [],
    "result": "object",
    "expression": "SoloValue PinnableCursorDevice#channel().solo()"
  }, {
    "method": "cursorDevice.channel.solo.toggle",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().solo().toggle(boolean)"
  }, {
    "method": "cursorDevice.channel.solo.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().solo().toggle()"
  }, {
    "method": "cursorDevice.channel.solo.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().solo().set(boolean)"
  }, {
    "method": "cursorDevice.channel.solo.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().solo().get()"
  }, {
    "method": "cursorDevice.channel.solo.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().solo().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.solo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().solo().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.solo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().solo().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.solo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().solo().subscribe()"
  }, {
    "method": "cursorDevice.channel.solo.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().solo().invoke()"
  }, {
    "method": "cursorDevice.channel.volume",
    "params": [],
    "result": "object",
    "expression": "Parameter PinnableCursorDevice#channel().volume()"
  }, {
    "method": "cursorDevice.channel.volume.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().setIndication(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.name",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().volume().name()"
  }, {
    "method": "cursorDevice.channel.volume.name.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().name().get()"
  }, {
    "method": "cursorDevice.channel.volume.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().name().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.volume.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().name().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue PinnableCursorDevice#channel().volume().value()"
  }, {
    "method": "cursorDevice.channel.volume.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().setImmediately(double)"
  }, {
    "method": "cursorDevice.channel.volume.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().incRaw(double)"
  }, {
    "method": "cursorDevice.channel.volume.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().set(double)"
  }, {
    "method": "cursorDevice.channel.volume.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().inc(double)"
  }, {
    "method": "cursorDevice.channel.volume.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().setRaw(double)"
  }, {
    "method": "cursorDevice.channel.volume.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().value().getRaw()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().volume().value().displayedValue()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().value().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().value().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value.get",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().value().get()"
  }, {
    "method": "cursorDevice.channel.volume.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().value().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.volume.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().value().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().value().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.reset",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().reset()"
  }, {
    "method": "cursorDevice.channel.volume.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().touch(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue PinnableCursorDevice#channel().volume().modulatedValue()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().modulatedValue().getRaw()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().volume().modulatedValue().displayedValue()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().modulatedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().modulatedValue().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().modulatedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().restoreAutomationControl()"
  }, {
    "method": "cursorDevice.channel.volume.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().volume().exists()"
  }, {
    "method": "cursorDevice.channel.volume.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().exists().get()"
  }, {
    "method": "cursorDevice.channel.volume.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.volume.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().exists().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().exists().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().exists().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().setImmediately(double)"
  }, {
    "method": "cursorDevice.channel.volume.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().incRaw(double)"
  }, {
    "method": "cursorDevice.channel.volume.set",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().set(double)"
  }, {
    "method": "cursorDevice.channel.volume.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.volume.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().inc(double)"
  }, {
    "method": "cursorDevice.channel.volume.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.volume.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().setRaw(double)"
  }, {
    "method": "cursorDevice.channel.volume.getRaw",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().getRaw()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().volume().displayedValue()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().volume().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().volume().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().volume().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.get",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().get()"
  }, {
    "method": "cursorDevice.channel.volume.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().volume().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt",
    "params": ["number"],
    "result": "object",
    "expression": "Send PinnableCursorDevice#channel().sendBank().getItemAt(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isPreFader",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().sendBank().getItemAt(int).isPreFader()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isPreFader.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).isPreFader().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isPreFader.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).isPreFader().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isPreFader.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).isPreFader().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isPreFader.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).isPreFader().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isPreFader.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).isPreFader().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode",
    "params": ["number"],
    "result": "object",
    "expression": "SettableEnumValue PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.set",
    "params": ["number", "string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().set(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition",
    "params": ["number"],
    "result": "object",
    "expression": "EnumDefinition PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.getValueCount",
    "params": ["number"],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().getValueCount()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt",
    "params": ["number", "number"],
    "result": "object",
    "expression": "EnumValueDefinition PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number", "number"],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getId",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor",
    "params": ["number", "string"],
    "result": "object",
    "expression": "EnumValueDefinition PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["number", "string", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["number", "string"],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getId",
    "params": ["number", "string"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["number", "string"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.get",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendMode.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendMode().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor",
    "params": ["number"],
    "result": "object",
    "expression": "SettableColorValue PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.set",
    "params": ["number", "number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().set(float, float, float)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.set",
    "params": ["number", "number", "number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().set(float, float, float, float)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.red",
    "params": ["number"],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().red()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.alpha",
    "params": ["number"],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().alpha()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.blue",
    "params": ["number"],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().blue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.green",
    "params": ["number"],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().green()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).sendChannelColor().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setIndication",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).setIndication(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().sendBank().getItemAt(int).name()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.get",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).name().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).name().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).name().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value",
    "params": ["number"],
    "result": "object",
    "expression": "SettableRangedValue PinnableCursorDevice#channel().sendBank().getItemAt(int).value()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.setImmediately",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().setImmediately(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.incRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().incRaw(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().set(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.set",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().inc(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.inc",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.setRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().setRaw(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.getRaw",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).value().getRaw()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().sendBank().getItemAt(int).value().displayedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.get",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).value().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).value().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.get",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).value().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.getAsDouble",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).value().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).value().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).value().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.reset",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).reset()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.touch",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).touch(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue",
    "params": ["number"],
    "result": "object",
    "expression": "RangedValue PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.getRaw",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().getRaw()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().displayedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.get",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.get",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.getAsDouble",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().getAsDouble()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).modulatedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.restoreAutomationControl",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).restoreAutomationControl()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.exists",
    "params": ["number"],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().sendBank().getItemAt(int).exists()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.exists.get",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).exists().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.exists.getAsBoolean",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.exists.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).exists().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.exists.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).exists().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.exists.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).exists().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setImmediately",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).setImmediately(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.incRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).incRaw(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).set(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.set",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).inc(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.inc",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setRaw",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).setRaw(double)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.getRaw",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).getRaw()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue",
    "params": ["number"],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#channel().sendBank().getItemAt(int).displayedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.get",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.getLimited",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().sendBank().getItemAt(int).displayedValue().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.isSubscribed",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().getItemAt(int).displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.unsubscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.subscribe",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().getItemAt(int).displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.get",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.getAsDouble",
    "params": ["number"],
    "result": "number",
    "expression": "double PinnableCursorDevice#channel().sendBank().getItemAt(int).getAsDouble()"
  }, {
    "method": "cursorDevice.channel.sendBank.setSkipDisabledItems",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().setSkipDisabledItems(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue PinnableCursorDevice#channel().sendBank().cursorIndex()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.set",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().cursorIndex().set(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().cursorIndex().inc(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.get",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().cursorIndex().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().cursorIndex().getAsInt()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().cursorIndex().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().cursorIndex().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().cursorIndex().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPageForwards",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollPageForwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPageBackwards",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollPageBackwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.setSizeOfBank",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().setSizeOfBank(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount",
    "params": [],
    "result": "object",
    "expression": "IntegerValue PinnableCursorDevice#channel().sendBank().itemCount()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.get",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().itemCount().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().itemCount().getAsInt()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().itemCount().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().itemCount().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().itemCount().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getCapacityOfBank",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().getCapacityOfBank()"
  }, {
    "method": "cursorDevice.channel.sendBank.getSizeOfBank",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().getSizeOfBank()"
  }, {
    "method": "cursorDevice.channel.sendBank.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().sendBank().exists()"
  }, {
    "method": "cursorDevice.channel.sendBank.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().exists().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.sendBank.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().exists().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().exists().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().exists().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollForwards",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollForwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollBackwards",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollBackwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue PinnableCursorDevice#channel().sendBank().scrollPosition()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollPosition().set(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollPosition().inc(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.get",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().scrollPosition().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#channel().sendBank().scrollPosition().getAsInt()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().scrollPosition().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollPosition().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollPosition().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().sendBank().canScrollBackwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().canScrollBackwards().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().canScrollBackwards().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().canScrollBackwards().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().canScrollBackwards().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().canScrollBackwards().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().sendBank().canScrollForwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().canScrollForwards().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().canScrollForwards().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().sendBank().canScrollForwards().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().canScrollForwards().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().canScrollForwards().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollIntoView",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollIntoView(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollBy",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollBy(int)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollByPages",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().sendBank().scrollByPages(int)"
  }, {
    "method": "cursorDevice.channel.selectInMixer",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().selectInMixer()"
  }, {
    "method": "cursorDevice.channel.playingNotes.isNotePlaying",
    "params": ["number"],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().playingNotes().isNotePlaying(int)"
  }, {
    "method": "cursorDevice.channel.playingNotes.get",
    "params": [],
    "result": "any[]",
    "expression": "Object[] PinnableCursorDevice#channel().playingNotes().get()"
  }, {
    "method": "cursorDevice.channel.playingNotes.get",
    "params": ["number"],
    "result": "any",
    "expression": "Object PinnableCursorDevice#channel().playingNotes().get(int)"
  }, {
    "method": "cursorDevice.channel.playingNotes.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().playingNotes().isEmpty()"
  }, {
    "method": "cursorDevice.channel.playingNotes.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().playingNotes().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.playingNotes.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().playingNotes().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.playingNotes.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().playingNotes().subscribe()"
  }, {
    "method": "cursorDevice.channel.isMutedBySolo",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().isMutedBySolo()"
  }, {
    "method": "cursorDevice.channel.isMutedBySolo.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isMutedBySolo().get()"
  }, {
    "method": "cursorDevice.channel.isMutedBySolo.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isMutedBySolo().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.isMutedBySolo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isMutedBySolo().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.isMutedBySolo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isMutedBySolo().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.isMutedBySolo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().isMutedBySolo().subscribe()"
  }, {
    "method": "cursorDevice.channel.color",
    "params": [],
    "result": "object",
    "expression": "SettableColorValue PinnableCursorDevice#channel().color()"
  }, {
    "method": "cursorDevice.channel.color.set",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().color().set(float, float, float)"
  }, {
    "method": "cursorDevice.channel.color.set",
    "params": ["number", "number", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().color().set(float, float, float, float)"
  }, {
    "method": "cursorDevice.channel.color.red",
    "params": [],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().color().red()"
  }, {
    "method": "cursorDevice.channel.color.alpha",
    "params": [],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().color().alpha()"
  }, {
    "method": "cursorDevice.channel.color.blue",
    "params": [],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().color().blue()"
  }, {
    "method": "cursorDevice.channel.color.green",
    "params": [],
    "result": "number",
    "expression": "float PinnableCursorDevice#channel().color().green()"
  }, {
    "method": "cursorDevice.channel.color.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().color().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.color.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().color().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.color.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().color().subscribe()"
  }, {
    "method": "cursorDevice.channel.duplicate",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().duplicate()"
  }, {
    "method": "cursorDevice.channel.deleteObject",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().deleteObject()"
  }, {
    "method": "cursorDevice.channel.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().selectInEditor()"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().startOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().startOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().startOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().startOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().endOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().endOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().endOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().endOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.channel.name",
    "params": [],
    "result": "object",
    "expression": "SettableStringValue PinnableCursorDevice#channel().name()"
  }, {
    "method": "cursorDevice.channel.name.set",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().name().set(java.lang.String)"
  }, {
    "method": "cursorDevice.channel.name.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().name().get()"
  }, {
    "method": "cursorDevice.channel.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#channel().name().getLimited(int)"
  }, {
    "method": "cursorDevice.channel.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().name().subscribe()"
  }, {
    "method": "cursorDevice.channel.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#channel().exists()"
  }, {
    "method": "cursorDevice.channel.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().exists().get()"
  }, {
    "method": "cursorDevice.channel.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.channel.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().exists().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().exists().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().exists().subscribe()"
  }, {
    "method": "cursorDevice.channel.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#channel().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#channel().subscribe()"
  }, {
    "method": "cursorDevice.selectLastInKeyPad",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectLastInKeyPad(int)"
  }, {
    "method": "cursorDevice.selectLastInLayer",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectLastInLayer(int)"
  }, {
    "method": "cursorDevice.selectLastInLayer",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectLastInLayer(java.lang.String)"
  }, {
    "method": "cursorDevice.selectLastInSlot",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectLastInSlot(java.lang.String)"
  }, {
    "method": "cursorDevice.selectFirst",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectFirst()"
  }, {
    "method": "cursorDevice.selectLast",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectLast()"
  }, {
    "method": "cursorDevice.selectNext",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectNext()"
  }, {
    "method": "cursorDevice.selectPrevious",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectPrevious()"
  }, {
    "method": "cursorDevice.hasNext",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#hasNext()"
  }, {
    "method": "cursorDevice.hasNext.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasNext().get()"
  }, {
    "method": "cursorDevice.hasNext.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasNext().getAsBoolean()"
  }, {
    "method": "cursorDevice.hasNext.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasNext().isSubscribed()"
  }, {
    "method": "cursorDevice.hasNext.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasNext().unsubscribe()"
  }, {
    "method": "cursorDevice.hasNext.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasNext().subscribe()"
  }, {
    "method": "cursorDevice.hasPrevious",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#hasPrevious()"
  }, {
    "method": "cursorDevice.hasPrevious.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasPrevious().get()"
  }, {
    "method": "cursorDevice.hasPrevious.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasPrevious().getAsBoolean()"
  }, {
    "method": "cursorDevice.hasPrevious.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasPrevious().isSubscribed()"
  }, {
    "method": "cursorDevice.hasPrevious.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasPrevious().unsubscribe()"
  }, {
    "method": "cursorDevice.hasPrevious.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasPrevious().subscribe()"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#afterDeviceInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#afterDeviceInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#afterDeviceInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#afterDeviceInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#afterDeviceInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#afterDeviceInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.deviceType",
    "params": [],
    "result": "object",
    "expression": "EnumValue PinnableCursorDevice#deviceType()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition",
    "params": [],
    "result": "object",
    "expression": "EnumDefinition PinnableCursorDevice#deviceType().enumDefinition()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.getValueCount",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#deviceType().enumDefinition().getValueCount()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionAt",
    "params": ["number"],
    "result": "object",
    "expression": "EnumValueDefinition PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionAt(int)"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionAt.getLimitedDisplayName",
    "params": ["number", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionAt(int).getLimitedDisplayName(int)"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionAt.getValueIndex",
    "params": ["number"],
    "result": "number",
    "expression": "int PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionAt(int).getValueIndex()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionAt.getId",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionAt(int).getId()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionAt.getDisplayName",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionAt(int).getDisplayName()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionFor",
    "params": ["string"],
    "result": "object",
    "expression": "EnumValueDefinition PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionFor(java.lang.String)"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionFor.getLimitedDisplayName",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionFor(java.lang.String).getLimitedDisplayName(int)"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionFor.getValueIndex",
    "params": ["string"],
    "result": "number",
    "expression": "int PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionFor(java.lang.String).getValueIndex()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionFor.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionFor(java.lang.String).getId()"
  }, {
    "method": "cursorDevice.deviceType.enumDefinition.valueDefinitionFor.getDisplayName",
    "params": ["string"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().enumDefinition().valueDefinitionFor(java.lang.String).getDisplayName()"
  }, {
    "method": "cursorDevice.deviceType.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceType().get()"
  }, {
    "method": "cursorDevice.deviceType.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#deviceType().isSubscribed()"
  }, {
    "method": "cursorDevice.deviceType.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceType().unsubscribe()"
  }, {
    "method": "cursorDevice.deviceType.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceType().subscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().selectInEditor()"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().startOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().startOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().startOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().startOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().endOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().endOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().endOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().endOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.getCursorSlot.name",
    "params": [],
    "result": "object",
    "expression": "SettableStringValue PinnableCursorDevice#getCursorSlot().name()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.set",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().name().set(java.lang.String)"
  }, {
    "method": "cursorDevice.getCursorSlot.name.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#getCursorSlot().name().get()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#getCursorSlot().name().getLimited(int)"
  }, {
    "method": "cursorDevice.getCursorSlot.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#getCursorSlot().name().isSubscribed()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().name().unsubscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().name().subscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#getCursorSlot().exists()"
  }, {
    "method": "cursorDevice.getCursorSlot.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#getCursorSlot().exists().get()"
  }, {
    "method": "cursorDevice.getCursorSlot.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#getCursorSlot().exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.getCursorSlot.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#getCursorSlot().exists().isSubscribed()"
  }, {
    "method": "cursorDevice.getCursorSlot.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().exists().unsubscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().exists().subscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#getCursorSlot().isSubscribed()"
  }, {
    "method": "cursorDevice.getCursorSlot.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().unsubscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#getCursorSlot().subscribe()"
  }, {
    "method": "cursorDevice.hasLayers",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#hasLayers()"
  }, {
    "method": "cursorDevice.hasLayers.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasLayers().get()"
  }, {
    "method": "cursorDevice.hasLayers.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasLayers().getAsBoolean()"
  }, {
    "method": "cursorDevice.hasLayers.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasLayers().isSubscribed()"
  }, {
    "method": "cursorDevice.hasLayers.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasLayers().unsubscribe()"
  }, {
    "method": "cursorDevice.hasLayers.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasLayers().subscribe()"
  }, {
    "method": "cursorDevice.hasSlots",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#hasSlots()"
  }, {
    "method": "cursorDevice.hasSlots.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasSlots().get()"
  }, {
    "method": "cursorDevice.hasSlots.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasSlots().getAsBoolean()"
  }, {
    "method": "cursorDevice.hasSlots.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasSlots().isSubscribed()"
  }, {
    "method": "cursorDevice.hasSlots.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasSlots().unsubscribe()"
  }, {
    "method": "cursorDevice.hasSlots.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasSlots().subscribe()"
  }, {
    "method": "cursorDevice.incDirectParameterValueNormalized",
    "params": ["string", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#incDirectParameterValueNormalized(java.lang.String, java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.isExpanded",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#isExpanded()"
  }, {
    "method": "cursorDevice.isExpanded.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isExpanded().toggle()"
  }, {
    "method": "cursorDevice.isExpanded.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#isExpanded().set(boolean)"
  }, {
    "method": "cursorDevice.isExpanded.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isExpanded().get()"
  }, {
    "method": "cursorDevice.isExpanded.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isExpanded().getAsBoolean()"
  }, {
    "method": "cursorDevice.isExpanded.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isExpanded().isSubscribed()"
  }, {
    "method": "cursorDevice.isExpanded.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isExpanded().unsubscribe()"
  }, {
    "method": "cursorDevice.isExpanded.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isExpanded().subscribe()"
  }, {
    "method": "cursorDevice.isExpanded.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isExpanded().invoke()"
  }, {
    "method": "cursorDevice.isNested",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#isNested()"
  }, {
    "method": "cursorDevice.isNested.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isNested().get()"
  }, {
    "method": "cursorDevice.isNested.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isNested().getAsBoolean()"
  }, {
    "method": "cursorDevice.isNested.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isNested().isSubscribed()"
  }, {
    "method": "cursorDevice.isNested.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isNested().unsubscribe()"
  }, {
    "method": "cursorDevice.isNested.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isNested().subscribe()"
  }, {
    "method": "cursorDevice.isPlugin",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#isPlugin()"
  }, {
    "method": "cursorDevice.isPlugin.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isPlugin().get()"
  }, {
    "method": "cursorDevice.isPlugin.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isPlugin().getAsBoolean()"
  }, {
    "method": "cursorDevice.isPlugin.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isPlugin().isSubscribed()"
  }, {
    "method": "cursorDevice.isPlugin.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPlugin().unsubscribe()"
  }, {
    "method": "cursorDevice.isPlugin.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPlugin().subscribe()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#isRemoteControlsSectionVisible()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isRemoteControlsSectionVisible().toggle()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#isRemoteControlsSectionVisible().set(boolean)"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isRemoteControlsSectionVisible().get()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isRemoteControlsSectionVisible().getAsBoolean()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isRemoteControlsSectionVisible().isSubscribed()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isRemoteControlsSectionVisible().unsubscribe()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isRemoteControlsSectionVisible().subscribe()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isRemoteControlsSectionVisible().invoke()"
  }, {
    "method": "cursorDevice.nextParameterPage",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#nextParameterPage()"
  }, {
    "method": "cursorDevice.previousParameterPage",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#previousParameterPage()"
  }, {
    "method": "cursorDevice.sampleName",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#sampleName()"
  }, {
    "method": "cursorDevice.sampleName.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#sampleName().get()"
  }, {
    "method": "cursorDevice.sampleName.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#sampleName().getLimited(int)"
  }, {
    "method": "cursorDevice.sampleName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#sampleName().isSubscribed()"
  }, {
    "method": "cursorDevice.sampleName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#sampleName().unsubscribe()"
  }, {
    "method": "cursorDevice.sampleName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#sampleName().subscribe()"
  }, {
    "method": "cursorDevice.setDirectParameterValueNormalized",
    "params": ["string", "number", "number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#setDirectParameterValueNormalized(java.lang.String, java.lang.Number, java.lang.Number)"
  }, {
    "method": "cursorDevice.setParameterPage",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#setParameterPage(int)"
  }, {
    "method": "cursorDevice.slotNames",
    "params": [],
    "result": "object",
    "expression": "StringArrayValue PinnableCursorDevice#slotNames()"
  }, {
    "method": "cursorDevice.slotNames.get",
    "params": [],
    "result": "string[]",
    "expression": "String[] PinnableCursorDevice#slotNames().get()"
  }, {
    "method": "cursorDevice.slotNames.get",
    "params": ["number"],
    "result": "any",
    "expression": "Object PinnableCursorDevice#slotNames().get(int)"
  }, {
    "method": "cursorDevice.slotNames.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#slotNames().isEmpty()"
  }, {
    "method": "cursorDevice.slotNames.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#slotNames().isSubscribed()"
  }, {
    "method": "cursorDevice.slotNames.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#slotNames().unsubscribe()"
  }, {
    "method": "cursorDevice.slotNames.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#slotNames().subscribe()"
  }, {
    "method": "cursorDevice.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#selectInEditor()"
  }, {
    "method": "cursorDevice.isWindowOpen",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#isWindowOpen()"
  }, {
    "method": "cursorDevice.isWindowOpen.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isWindowOpen().toggle()"
  }, {
    "method": "cursorDevice.isWindowOpen.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#isWindowOpen().set(boolean)"
  }, {
    "method": "cursorDevice.isWindowOpen.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isWindowOpen().get()"
  }, {
    "method": "cursorDevice.isWindowOpen.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isWindowOpen().getAsBoolean()"
  }, {
    "method": "cursorDevice.isWindowOpen.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isWindowOpen().isSubscribed()"
  }, {
    "method": "cursorDevice.isWindowOpen.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isWindowOpen().unsubscribe()"
  }, {
    "method": "cursorDevice.isWindowOpen.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isWindowOpen().subscribe()"
  }, {
    "method": "cursorDevice.isWindowOpen.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isWindowOpen().invoke()"
  }, {
    "method": "cursorDevice.hasDrumPads",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#hasDrumPads()"
  }, {
    "method": "cursorDevice.hasDrumPads.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasDrumPads().get()"
  }, {
    "method": "cursorDevice.hasDrumPads.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasDrumPads().getAsBoolean()"
  }, {
    "method": "cursorDevice.hasDrumPads.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#hasDrumPads().isSubscribed()"
  }, {
    "method": "cursorDevice.hasDrumPads.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasDrumPads().unsubscribe()"
  }, {
    "method": "cursorDevice.hasDrumPads.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#hasDrumPads().subscribe()"
  }, {
    "method": "cursorDevice.presetName",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#presetName()"
  }, {
    "method": "cursorDevice.presetName.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#presetName().get()"
  }, {
    "method": "cursorDevice.presetName.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#presetName().getLimited(int)"
  }, {
    "method": "cursorDevice.presetName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#presetName().isSubscribed()"
  }, {
    "method": "cursorDevice.presetName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#presetName().unsubscribe()"
  }, {
    "method": "cursorDevice.presetName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#presetName().subscribe()"
  }, {
    "method": "cursorDevice.presetCategory",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#presetCategory()"
  }, {
    "method": "cursorDevice.presetCategory.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#presetCategory().get()"
  }, {
    "method": "cursorDevice.presetCategory.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#presetCategory().getLimited(int)"
  }, {
    "method": "cursorDevice.presetCategory.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#presetCategory().isSubscribed()"
  }, {
    "method": "cursorDevice.presetCategory.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#presetCategory().unsubscribe()"
  }, {
    "method": "cursorDevice.presetCategory.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#presetCategory().subscribe()"
  }, {
    "method": "cursorDevice.presetCreator",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#presetCreator()"
  }, {
    "method": "cursorDevice.presetCreator.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#presetCreator().get()"
  }, {
    "method": "cursorDevice.presetCreator.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#presetCreator().getLimited(int)"
  }, {
    "method": "cursorDevice.presetCreator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#presetCreator().isSubscribed()"
  }, {
    "method": "cursorDevice.presetCreator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#presetCreator().unsubscribe()"
  }, {
    "method": "cursorDevice.presetCreator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#presetCreator().subscribe()"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#replaceDeviceInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#replaceDeviceInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#replaceDeviceInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#replaceDeviceInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#replaceDeviceInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#replaceDeviceInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.deviceChain.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().selectInEditor()"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().startOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().startOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().startOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().startOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().endOfDeviceChainInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().endOfDeviceChainInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().endOfDeviceChainInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().endOfDeviceChainInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.deviceChain.name",
    "params": [],
    "result": "object",
    "expression": "SettableStringValue PinnableCursorDevice#deviceChain().name()"
  }, {
    "method": "cursorDevice.deviceChain.name.set",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().name().set(java.lang.String)"
  }, {
    "method": "cursorDevice.deviceChain.name.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceChain().name().get()"
  }, {
    "method": "cursorDevice.deviceChain.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#deviceChain().name().getLimited(int)"
  }, {
    "method": "cursorDevice.deviceChain.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#deviceChain().name().isSubscribed()"
  }, {
    "method": "cursorDevice.deviceChain.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().name().unsubscribe()"
  }, {
    "method": "cursorDevice.deviceChain.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().name().subscribe()"
  }, {
    "method": "cursorDevice.deviceChain.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#deviceChain().exists()"
  }, {
    "method": "cursorDevice.deviceChain.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#deviceChain().exists().get()"
  }, {
    "method": "cursorDevice.deviceChain.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#deviceChain().exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.deviceChain.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#deviceChain().exists().isSubscribed()"
  }, {
    "method": "cursorDevice.deviceChain.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().exists().unsubscribe()"
  }, {
    "method": "cursorDevice.deviceChain.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().exists().subscribe()"
  }, {
    "method": "cursorDevice.deviceChain.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#deviceChain().isSubscribed()"
  }, {
    "method": "cursorDevice.deviceChain.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().unsubscribe()"
  }, {
    "method": "cursorDevice.deviceChain.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deviceChain().subscribe()"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertBitwigDevice",
    "params": ["object"],
    "result": "void",
    "expression": "void PinnableCursorDevice#beforeDeviceInsertionPoint().insertBitwigDevice(java.util.UUID)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertFile",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#beforeDeviceInsertionPoint().insertFile(java.lang.String)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertVST2Device",
    "params": ["number"],
    "result": "void",
    "expression": "void PinnableCursorDevice#beforeDeviceInsertionPoint().insertVST2Device(int)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertVST3Device",
    "params": ["string"],
    "result": "void",
    "expression": "void PinnableCursorDevice#beforeDeviceInsertionPoint().insertVST3Device(java.lang.String)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#beforeDeviceInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#beforeDeviceInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.name",
    "params": [],
    "result": "object",
    "expression": "StringValue PinnableCursorDevice#name()"
  }, {
    "method": "cursorDevice.name.get",
    "params": [],
    "result": "string",
    "expression": "String PinnableCursorDevice#name().get()"
  }, {
    "method": "cursorDevice.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String PinnableCursorDevice#name().getLimited(int)"
  }, {
    "method": "cursorDevice.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#name().isSubscribed()"
  }, {
    "method": "cursorDevice.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#name().unsubscribe()"
  }, {
    "method": "cursorDevice.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#name().subscribe()"
  }, {
    "method": "cursorDevice.position",
    "params": [],
    "result": "object",
    "expression": "IntegerValue PinnableCursorDevice#position()"
  }, {
    "method": "cursorDevice.position.get",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#position().get()"
  }, {
    "method": "cursorDevice.position.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int PinnableCursorDevice#position().getAsInt()"
  }, {
    "method": "cursorDevice.position.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#position().isSubscribed()"
  }, {
    "method": "cursorDevice.position.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#position().unsubscribe()"
  }, {
    "method": "cursorDevice.position.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#position().subscribe()"
  }, {
    "method": "cursorDevice.isEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#isEnabled()"
  }, {
    "method": "cursorDevice.isEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isEnabled().toggle()"
  }, {
    "method": "cursorDevice.isEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#isEnabled().set(boolean)"
  }, {
    "method": "cursorDevice.isEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isEnabled().get()"
  }, {
    "method": "cursorDevice.isEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isEnabled().getAsBoolean()"
  }, {
    "method": "cursorDevice.isEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isEnabled().isSubscribed()"
  }, {
    "method": "cursorDevice.isEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isEnabled().unsubscribe()"
  }, {
    "method": "cursorDevice.isEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isEnabled().subscribe()"
  }, {
    "method": "cursorDevice.isEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isEnabled().invoke()"
  }, {
    "method": "cursorDevice.deleteObject",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#deleteObject()"
  }, {
    "method": "cursorDevice.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue PinnableCursorDevice#exists()"
  }, {
    "method": "cursorDevice.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#exists().get()"
  }, {
    "method": "cursorDevice.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#exists().getAsBoolean()"
  }, {
    "method": "cursorDevice.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#exists().isSubscribed()"
  }, {
    "method": "cursorDevice.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#exists().unsubscribe()"
  }, {
    "method": "cursorDevice.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#exists().subscribe()"
  }, {
    "method": "cursorDevice.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isSubscribed()"
  }, {
    "method": "cursorDevice.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#unsubscribe()"
  }, {
    "method": "cursorDevice.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#subscribe()"
  }, {
    "method": "cursorDevice.isPinned",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue PinnableCursorDevice#isPinned()"
  }, {
    "method": "cursorDevice.isPinned.toggle",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPinned().toggle()"
  }, {
    "method": "cursorDevice.isPinned.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPinned().set(boolean)"
  }, {
    "method": "cursorDevice.isPinned.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isPinned().get()"
  }, {
    "method": "cursorDevice.isPinned.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isPinned().getAsBoolean()"
  }, {
    "method": "cursorDevice.isPinned.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean PinnableCursorDevice#isPinned().isSubscribed()"
  }, {
    "method": "cursorDevice.isPinned.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPinned().unsubscribe()"
  }, {
    "method": "cursorDevice.isPinned.subscribe",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPinned().subscribe()"
  }, {
    "method": "cursorDevice.isPinned.invoke",
    "params": [],
    "result": "void",
    "expression": "void PinnableCursorDevice#isPinned().invoke()"
  }],
  "events": [{
    "event": "rpc.log"
  }, {
    "event": "host.getNotificationSettings.getUserNotificationsEnabled"
  }, {
    "event": "application.recordQuantizationGrid"
  }, {
    "event": "application.displayProfile"
  }, {
    "event": "application.hasActiveEngine"
  }, {
    "event": "application.panelLayout"
  }, {
    "event": "application.projectName"
  }, {
    "event": "application.recordQuantizeNoteLength"
  }, {
    "event": "transport.clipLauncherPostRecordingAction"
  }, {
    "event": "transport.getClipLauncherPostRecordingTimeOffset"
  }, {
    "event": "transport.isArrangerOverdubEnabled"
  }, {
    "event": "transport.isAutomationOverrideActive"
  }, {
    "event": "transport.isMetronomeAudibleDuringPreRoll"
  }, {
    "event": "transport.isMetronomeTickPlaybackEnabled"
  }, {
    "event": "transport.metronomeVolume"
  }, {
    "event": "transport.metronomeVolume.displayedValue"
  }, {
    "event": "transport.playPosition"
  }, {
    "event": "transport.playPositionInSeconds"
  }, {
    "event": "transport.playStartPositionInSeconds"
  }, {
    "event": "transport.preRoll"
  }, {
    "event": "transport.timeSignature"
  }, {
    "event": "transport.timeSignature.denominator"
  }, {
    "event": "transport.timeSignature.numerator"
  }, {
    "event": "transport.timeSignature.ticks"
  }, {
    "event": "transport.tempo.name"
  }, {
    "event": "transport.tempo.value"
  }, {
    "event": "transport.tempo.value.displayedValue"
  }, {
    "event": "transport.tempo.modulatedValue"
  }, {
    "event": "transport.tempo.modulatedValue.displayedValue"
  }, {
    "event": "transport.tempo.exists"
  }, {
    "event": "transport.tempo.displayedValue"
  }, {
    "event": "transport.isPlaying"
  }, {
    "event": "transport.isMetronomeEnabled"
  }, {
    "event": "transport.isArrangerRecordEnabled"
  }, {
    "event": "transport.isArrangerAutomationWriteEnabled"
  }, {
    "event": "transport.isClipLauncherAutomationWriteEnabled"
  }, {
    "event": "transport.isClipLauncherOverdubEnabled"
  }, {
    "event": "transport.defaultLaunchQuantization"
  }, {
    "event": "transport.getInPosition"
  }, {
    "event": "transport.getOutPosition"
  }, {
    "event": "transport.isPunchInEnabled"
  }, {
    "event": "transport.isPunchOutEnabled"
  }, {
    "event": "transport.automationWriteMode"
  }, {
    "event": "transport.playStartPosition"
  }, {
    "event": "transport.isArrangerLoopEnabled"
  }, {
    "event": "transport.crossfade.name"
  }, {
    "event": "transport.crossfade.value"
  }, {
    "event": "transport.crossfade.value.displayedValue"
  }, {
    "event": "transport.crossfade.modulatedValue"
  }, {
    "event": "transport.crossfade.modulatedValue.displayedValue"
  }, {
    "event": "transport.crossfade.exists"
  }, {
    "event": "transport.crossfade.displayedValue"
  }, {
    "event": "transport.getPosition"
  }, {
    "event": "transport.exists"
  }, {
    "event": "mixer.isIoSectionVisible"
  }, {
    "event": "mixer.isCrossFadeSectionVisible"
  }, {
    "event": "mixer.isClipLauncherSectionVisible"
  }, {
    "event": "mixer.isDeviceSectionVisible"
  }, {
    "event": "mixer.isMeterSectionVisible"
  }, {
    "event": "mixer.isSendSectionVisible"
  }, {
    "event": "cursorTrack.isActivated"
  }, {
    "event": "cursorTrack.pan.name"
  }, {
    "event": "cursorTrack.pan.value"
  }, {
    "event": "cursorTrack.pan.value.displayedValue"
  }, {
    "event": "cursorTrack.pan.modulatedValue"
  }, {
    "event": "cursorTrack.pan.modulatedValue.displayedValue"
  }, {
    "event": "cursorTrack.pan.exists"
  }, {
    "event": "cursorTrack.pan.displayedValue"
  }, {
    "event": "cursorTrack.mute"
  }, {
    "event": "cursorTrack.solo"
  }, {
    "event": "cursorTrack.volume.name"
  }, {
    "event": "cursorTrack.volume.value"
  }, {
    "event": "cursorTrack.volume.value.displayedValue"
  }, {
    "event": "cursorTrack.volume.modulatedValue"
  }, {
    "event": "cursorTrack.volume.modulatedValue.displayedValue"
  }, {
    "event": "cursorTrack.volume.exists"
  }, {
    "event": "cursorTrack.volume.displayedValue"
  }, {
    "event": "cursorTrack.sendBank.getItemAt.isPreFader",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.sendMode",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.sendChannelColor",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.name",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.value",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.value.displayedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.modulatedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.exists",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.displayedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.sendBank.cursorIndex"
  }, {
    "event": "cursorTrack.sendBank.itemCount"
  }, {
    "event": "cursorTrack.sendBank.exists"
  }, {
    "event": "cursorTrack.sendBank.scrollPosition"
  }, {
    "event": "cursorTrack.sendBank.canScrollBackwards"
  }, {
    "event": "cursorTrack.sendBank.canScrollForwards"
  }, {
    "event": "cursorTrack.playingNotes"
  }, {
    "event": "cursorTrack.isMutedBySolo"
  }, {
    "event": "cursorTrack.color"
  }, {
    "event": "cursorTrack.name"
  }, {
    "event": "cursorTrack.exists"
  }, {
    "event": "cursorTrack.hasNext"
  }, {
    "event": "cursorTrack.hasPrevious"
  }, {
    "event": "cursorTrack.isPinned"
  }, {
    "event": "cursorTrack.autoMonitor"
  }, {
    "event": "cursorTrack.canHoldAudioData"
  }, {
    "event": "cursorTrack.canHoldNoteData"
  }, {
    "event": "cursorTrack.getIsPreFader"
  }, {
    "event": "cursorTrack.sourceSelector.hasAudioInputSelected"
  }, {
    "event": "cursorTrack.sourceSelector.hasNoteInputSelected"
  }, {
    "event": "cursorTrack.sourceSelector.exists"
  }, {
    "event": "cursorTrack.trackType"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.color",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.name",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.exists",
    "bankDimension": [2]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.cursorIndex"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.itemCount"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.exists"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.scrollPosition"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.canScrollBackwards"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.canScrollForwards"
  }, {
    "event": "cursorTrack.crossFadeMode"
  }, {
    "event": "cursorTrack.isGroup"
  }, {
    "event": "cursorTrack.isQueuedForStop"
  }, {
    "event": "cursorTrack.isStopped"
  }, {
    "event": "cursorTrack.position"
  }, {
    "event": "cursorTrack.arm"
  }, {
    "event": "cursorTrack.monitor"
  }, {
    "event": "cursorDevice.channel.isActivated"
  }, {
    "event": "cursorDevice.channel.pan.name"
  }, {
    "event": "cursorDevice.channel.pan.value"
  }, {
    "event": "cursorDevice.channel.pan.value.displayedValue"
  }, {
    "event": "cursorDevice.channel.pan.modulatedValue"
  }, {
    "event": "cursorDevice.channel.pan.modulatedValue.displayedValue"
  }, {
    "event": "cursorDevice.channel.pan.exists"
  }, {
    "event": "cursorDevice.channel.pan.displayedValue"
  }, {
    "event": "cursorDevice.channel.mute"
  }, {
    "event": "cursorDevice.channel.solo"
  }, {
    "event": "cursorDevice.channel.volume.name"
  }, {
    "event": "cursorDevice.channel.volume.value"
  }, {
    "event": "cursorDevice.channel.volume.value.displayedValue"
  }, {
    "event": "cursorDevice.channel.volume.modulatedValue"
  }, {
    "event": "cursorDevice.channel.volume.modulatedValue.displayedValue"
  }, {
    "event": "cursorDevice.channel.volume.exists"
  }, {
    "event": "cursorDevice.channel.volume.displayedValue"
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.isPreFader",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.sendMode",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.name",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.value",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.modulatedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.exists",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.displayedValue",
    "bankDimension": [2]
  }, {
    "event": "cursorDevice.channel.sendBank.cursorIndex"
  }, {
    "event": "cursorDevice.channel.sendBank.itemCount"
  }, {
    "event": "cursorDevice.channel.sendBank.exists"
  }, {
    "event": "cursorDevice.channel.sendBank.scrollPosition"
  }, {
    "event": "cursorDevice.channel.sendBank.canScrollBackwards"
  }, {
    "event": "cursorDevice.channel.sendBank.canScrollForwards"
  }, {
    "event": "cursorDevice.channel.playingNotes"
  }, {
    "event": "cursorDevice.channel.isMutedBySolo"
  }, {
    "event": "cursorDevice.channel.color"
  }, {
    "event": "cursorDevice.channel.name"
  }, {
    "event": "cursorDevice.channel.exists"
  }, {
    "event": "cursorDevice.hasNext"
  }, {
    "event": "cursorDevice.hasPrevious"
  }, {
    "event": "cursorDevice.deviceType",
    "error": "This cannot be called when specifying required API version 11:\nThis is only availble for API versions after 12"
  }, {
    "event": "cursorDevice.getCursorSlot.name"
  }, {
    "event": "cursorDevice.getCursorSlot.exists"
  }, {
    "event": "cursorDevice.hasLayers"
  }, {
    "event": "cursorDevice.hasSlots"
  }, {
    "event": "cursorDevice.isExpanded"
  }, {
    "event": "cursorDevice.isNested"
  }, {
    "event": "cursorDevice.isPlugin"
  }, {
    "event": "cursorDevice.isRemoteControlsSectionVisible"
  }, {
    "event": "cursorDevice.sampleName"
  }, {
    "event": "cursorDevice.slotNames"
  }, {
    "event": "cursorDevice.isWindowOpen"
  }, {
    "event": "cursorDevice.hasDrumPads"
  }, {
    "event": "cursorDevice.presetName"
  }, {
    "event": "cursorDevice.presetCategory"
  }, {
    "event": "cursorDevice.presetCreator"
  }, {
    "event": "cursorDevice.deviceChain.name"
  }, {
    "event": "cursorDevice.deviceChain.exists"
  }, {
    "event": "cursorDevice.name"
  }, {
    "event": "cursorDevice.position"
  }, {
    "event": "cursorDevice.isEnabled"
  }, {
    "event": "cursorDevice.exists"
  }, {
    "event": "cursorDevice.isPinned"
  }]
}
