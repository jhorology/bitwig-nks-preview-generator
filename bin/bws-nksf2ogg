#!/usr/bin/env node

const fs = require('fs'),
      path = require('path'),
      execSync = require('child_process').execSync,
      readline = require('readline'),
      program = require('commander'),
      updateNotifier = require('update-notifier'),
      rimraf = require('rimraf'),
      glob = require('glob'),
      Confirm = require('prompt-confirm'),
      ffmpeg = require('fluent-ffmpeg'),
      {Bar} = require('cli-progress'),
      chalk = require('chalk'),
      nksf2ogg = require('../lib/bitwig-nks-preview-generator'),
      Local = require('../lib/bitwig-studio-local'),
      logger = require('../lib/logger'),
      log = logger('bws-nksf2ogg'),
      {PluginProcessingError, PluginDiscardFile} = require('../lib/gulp-plugin-wrapper'),
      pkg = require('../package.json'),
      notifier = updateNotifier({pkg}),
      defaults = nksf2ogg.defaultOptions,
      descs = nksf2ogg.optionsDescriptions;
require('coffeescript/register');

if (notifier.update && notifier.update.latest !== pkg.version) {
  notifier.notify({
    defer: false
  });
}

program
  .description(pkg.description)
  .version(pkg.version);

program
  .command('exec <dir>')
  .description('Generate preview audio from .nksf preset files recursively.')
  .option('-d, --debug <level>',             'console verbosity level in testing, 0:none 1:ERROR 2:INFO 3:DEBUG 4:Bitwig Studio', intArg,  0)
  .option('-r, --dry-run',                   descs.dryRun,               defaults.dryRun)
  .option('-b, --bitwig <path>',             descs.bitwig,               defaults.bitwig)
  .option('-u, --url <URL>',                 descs.url,                  defaults.url)
  .option('-s, --skip-error',                descs.skipError)
  .option('-k, --skip-exist',                descs.skipExist)
  .option('-h, --show-plugin',               descs.showPlugin)
  .option('-c, --clip <path>',               descs.clip,                  defaults.clip)
  .option('-f, --fxb <path>',                descs.fxb,                   defaults.fxb)
  .option('-w, --wav <path>',                descs.wav,                   defaults.wav)
  .option('-t, --timeout <msec>',            descs.timeout,     msecArg, defaults.timeout)
  .option('-a, --wait-plugin <msec>',        descs.waitPlugin,  msecArg, defaults.waitPlugin)
  .option('-i, --wait-preset <msec>',        descs.waitPreset,  msecArg, defaults.waitPreset)
  .option('-e, --tempo <BPM>',               descs.tempo,       intArg,  defaults.tempo)
  .option('-f, --freq <Hz>',                 descs.freq,        intArg,  defaults.freq)
  .option('-d, --fadeout <sec>',             descs.fadeout,     floatArg,defaults.fadeout)
  .option('-l, --silence <dB>',              descs.silence,              defaults.silence)
  .option('-q, --quality <number>',          descs.quality,     intArg,  defaults.quality)
  .action(execCommand);

program
  .command('install')
  .description('Install Bitwig Studio WebSockets RPC server extension.')
  .option('-e, --extension-dir <path>', 'Bitwig Studio Extension directory', Local.defaultExtensionDir())
  .action(installCommand);

program
  .command('list <dir>')
  .description('List .nksf or .nksf.ogg files recursively.')
  .option('-a, --absolute', 'list files as absolute path', false)
  .option('-r, --relative', 'list files as relative path from <dir>', false)
  .option('-m, --missing',  "list preset files that doesn't have preview", false)
  .option('-u, --useless',  "list preview files that doesn't have preset", false)
  .option('-f, --ffprobe',  "list files as result of ffprobe", false)
  .action(listCommand);

program
  .command('clean <dir>')
  .description('Delete .previews folders recursively.')
  .option('-y, --yes',       'no comfirmation', false)
  .option('-c, --corrupted', 'find corrupted .nksf.ogg files and clean them', false)
  .action(cleanCommand);

program.parse(process.argv);

function msecArg(val, def) {
  const v = parseInt(val);
  return v;
}

function intArg(val, def) {
  const v = parseInt(val);
  return v;
}

function floatArg(val, def) {
  const v = parseFloat(val);
  return v;
}

/**
 * install Bitwig Studio Extension.
 * @param {Object} options
 */
function installCommand(options) {
  _checkDir(options.extensionDir);
  const basename = 'WebSocketRpcServer.bwextension';
  const src = path.resolve(__dirname, '../node_modules/bitwig-websocket-rpc', basename);
  const dest = path.join(options.extensionDir, basename);
  _checkFile(src);
  fs.copyFileSync(src, dest);
  console.info('file:', dest);
  console.info('Installation completed successfully.');
}

/**
 * List .nksf or .nksf.ogg files
 * @param {String} dir
 * @param {Object} options
 */
function listCommand(dir, options) {
  _checkDir(dir);
  const pattern = options.missing ?
        `${dir}/**/*.nksf` :
        `${dir}/**/.previews/*.nksf.ogg`;
  const filter = options.missing ?
        _hasNotPreview :
        (options.useless ? _hasNotPreset : undefined);
  const files = _glob(pattern, filter);
  files.forEach(file => {
    if (options.absolute) {
      file = path.resolve(file);
    } else if (options.relative) {
      file = path.relative(dir, file);
    }
    if (options.ffprobe) {
      ffmpeg(file)
        .ffprobe(function(err, data) {
          console.info(data);
        });
    } else {
      console.info(file);
    }
    firstFile = false;
  });
}

/**
 * Delete .previews folders
 * @param {String} dir
 * @param {Object} options
 */
function cleanCommand(dir, options) {
  _checkDir(dir);
  if (options.corrupted) {
    _cleanCorruptedFiles(dir, options);
  } else {
    _cleanPreviews(dir, options);
  }
}

function _cleanCorruptedFiles(dir, options) {
  const files = _glob(`${dir}/**/.previews/*.nksf.ogg`);
  if (!files.length) {
    console.info('".nksf.ogg" files are not found.');
    return;
  }
  // var rl = readline.createInterface({
  //   input: process.stdin,
  //   output: process.stdout
  // });


  const corruptedFiles = [];
  var fileCount = 0;
  (async() => {
    for(let file of files) {
      const rf = path.relative(dir, file);
      try {
        readline.clearLine(process.stdout, 0);
        readline.cursorTo(process.stdout, 0);
 //       readline.cursorTo(process.stdout);
        process.stdout.write(chalk.greenBright(`checking.. | ${++fileCount}/${files.length} | `));
        process.stdout.write(rf);
        await _detectCorrupted(file);
      } catch (err) {
        corruptedFiles.push(file);
        readline.clearLine(process.stdout, 0);
        readline.cursorTo(process.stdout, 0);
        process.stdout.write(chalk.redBright(err.message));
        //        process.stdout.write('\n');
      }
    }
    process.stdout.write('\n');
    if (!corruptedFiles.length) {
      console.info(chalk.greenBright('All files are seems to be OK.'));
      return;
    }
    if (options.yes) {
      corruptedFiles.forEach((f)=>rimraf.sync(f));
      return;
    }
    new Confirm(
      `Founded ${corruptedFiles.length} corruppted files. ` +
        'Are you sure to delete all these files ?'
    ).ask(ans => {
      if (ans) {
        corruptedFiles.forEach((f)=>rimraf.sync(f));
      }
    });
  })();
}

function _cleanPreviews(dir, options) {
  const folders = _glob(`${dir}/**/.previews`);
  if (!folders.length) {
    console.info('".previews" folders are not found.');
    return;
  }
  if (options.yes) {
    rimraf.sync(`${dir}/**/.previews`);
    return;
  }
  new Confirm(
    `Founded ${folders.length} folders. ` +
      'Are you sure to delete all the ".previews" folders ?'
  ).ask(ans => {
    if (ans) {
      rimraf.sync(`${dir}/**/.previews`);
    }
  });
}

function _detectCorrupted(file) {
  return new Promise((resolve, reject) => {
    const cmd = ffmpeg(file)
          // .audioFilter('silencedetect=n=-90dB:d=1')
          .format('wav')
          .on('error', function(err) {
            reject(err);
          })
          .on('end', function() {
            resolve();
          });
    var ffstream = cmd.pipe();
    ffstream.on('data', function(chunk) {});
  });
}

/**
 * exec command result summary.
 */
const summary = {
  completed: [],
  failed: [],
  ignored: []
};

/**
 * Generate preview audio from preset files
 * @param {String} dir
 * @param {Object} options
 */
function execCommand(dir, options) {
  _checkDir(dir);
  _checkFile(options.bitwig);
  _checkFile(options.clip);

  const clipExt = path.extname(options.clip);
  if (!['.bwclip', '.js', '.coffee'].includes(clipExt)) {
    console.error('error: unsupported --clip <path> option.');
    process.exit(1);
  }

  if (clipExt === '.js' || clipExt === '.coffee') {
    _checkJsFunction(options.clip);
  }

  const numFiles = _glob(`${dir}/**/*.nksf`, options.skipExist ? _hasNotPreview : undefined).length;
  if (!numFiles) {
    console.info('Target ".nksf" files are not found.');
    return;
  }
  // initialize logger
  var bar;
  if (options.debug) {
    logger.configure(options.debug);
  } else {
    // progress bar
    bar = new Bar({
      format: 'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total} | {message}'
    });
    bar.start(numFiles, 0, {
      message: 'waiting for start progress'
    });
  }
  // start the progress bar with a total value of 200 and start value of 0
  
  nksf2ogg(dir, options, function(err, file) {
    const message = _execHandleProgress(err, file);
    if (bar && message) {
      bar.update(summary.completed.length + summary.failed.length, {
        message: (err ? '❗️' : '✅️') + ' | ' + message
      });
    }
  }).on('end', ()=>{
    // stop progress bar.
    if (bar) bar.stop();
  });
  process.on('exit', (code) => {
    if (!code) {
      _execReportSummary(summary);
    }
  });
}

function _execHandleProgress(err, file) {
  var progressMessage;
  if (file) {
    progressMessage = file.basename;
  } else if (err && err instanceof PluginDiscardFile) {
    progressMessage = null;
  } else if (err && err instanceof PluginProcessingError) {
    progressMessage = path.basename(err.file);
  } else {
    progressMessage = '';
  }
  if (err) {
    if (err instanceof PluginDiscardFile) {
      summary.ignored.push(err.srcFile.path);
    } else if (err instanceof PluginProcessingError) {
      summary.failed.push({
        file: err.file.path,
        causedBy: err
      });
      if (err.stop) {
        summary.stopCausedBy =  err;
      }
    } else {
      summary.stopCausedBy = err;
      this.emit('end');
    }
  } else if (file) {
    summary.completed.push(file.path);
  }
  return progressMessage;
}

function _execReportSummary(summary) {
  if (summary.stopCausedBy) {
    console.info(chalk.redBright.bold('Execution done with error:'),
                 summary.stopCausedBy);
    process.exit(1);
  }
  if (summary) {
    const results = [];
    results.push(chalk.greenBright(`${summary.completed.length} files succeeded`));
    if (summary.failed.length) {
      results.push(chalk.redBright(`${summary.failed.length} files failed`));
    }
    if (summary.ignored.length) {
      results.push(chalk.yellowBright(`${summary.ignored.length} files ignored`));
    }
    console.info(chalk.greenBright.bold('Execution completed with result:'),
                 results.join(', ') + '.');
  }
}

function _checkDir(dir) {
  if (!fs.existsSync(dir)) {
    console.error(`error: no such directory, "${dir}"`);
    process.exit(1);
  }
  if (!fs.statSync(dir).isDirectory()) {
    console.error(`error: no such directory, "${dir}"`);
    process.exit(1);
  }
}

function _checkFile(file) {
  if (!fs.existsSync(file)) {
    console.error(`error: no such file, "${file}"`);
    process.exit(1);
  }
  if (!fs.statSync(file).isFile()) {
    console.error(`error: no such file, "${file}"`);
    process.exit(1);
  }
}

function _checkJsFunction(file) {
  let fn;
  try {
    fn = require(path.resolve(file));
  } catch (err) {
    console.info(err);
    process.exit(1);
  }
  if (typeof fn !== 'function') {
    console.error('error: --clip <path> .js file should export function');
    process.exit(1);
  }
}

function _glob(pattern, filter, options = {}) {
  let files = glob.sync(pattern, options);
  if (filter) {
    files = files.filter((f) =>{
      return filter(f);
    });
  }
  return files;
}

function _hasPreview(file) {
  const preview = path.join(path.dirname(file), '.previews', path.basename(file) + '.ogg');
  return fs.existsSync(preview);
}

function _hasNotPreview(file) {
  return !_hasPreview(file);
}

function _hasPreset(file) {
  const preset = path.resolve(path.dirname(file), '..', path.basename(file, '.ogg'));
  return fs.existsSync(preset);
}

function _hasNotPreset(file) {
  return !_hasPreset(file);
}
